#!/usr/bin/perl -w
#
# Reboot daemon
# Listens on port 2550 for reboot commands:
# 0:1:20-off
# 0:1:20-on
# 0:1:20-cycle
# serial_port:board_address:port-action

use strict;
use IO::Socket::INET;
use Time::HiRes qw(ualarm usleep);

my ($ksipaddr, $macaddr, $rebootServer, $power, $style, @ports);

sub getmac {
        my $ret = '';
        open IFH, "/sbin/ifconfig eth0 |";
        while (<IFH>) {
                next unless (/HWaddr/);
                if (/((\w{2}:){5}\w{2})/) { $ret = lc($1); }
        }
        close IFH;
        return $ret;
}

sub getSerialPorts {
        my @return;

        open IFH, "</proc/tty/driver/serial" || return undef;
        while (<IFH>) {
                next unless (/^(\d+): uart:XR16850/);
                #next unless (/^(\d+): uart:16550A/);
                my $tty = $1;
                print "Found serial port: $tty\n";
                push @return, $tty;
        }

        return @return;
}

sub parse {
        my $input = shift();

        # serial_port:board_address:switch_port
        if ($input =~ /(\d+):(\d+):(\d+)-(on|off|cycle)/) {
        my $return = {};
        $return->{serial} = $ports[$1];
        $return->{board} = $2;
        $return->{port} = $3;
        $return->{action} = $4;
                return $return;
        } else {
                return undef;
        }
}

sub do_reboot {
        my $input = shift();
    my $result = 0;

        if (($style == 1) && ($power == 1)) {
        # We are using the serial version and it is plugged into the power pins
        # on the motherboard.  We can do power off, power on, or a full cycle.
        if ($input->{action} eq "off") {
                        $result = power_off($input);
        }
        elsif ($input->{action} eq "on") {
                        $result = power_on($input);
        }
        elsif ($input->{action} eq "cycle") {
                        $result = power_off($input);
                        $result = power_on($input);
        }
        }
    elsif ($style == 1) {
        # We are using the serial version and it is plugged into the reset pins
        # on the motherboard.  We can only do a reset.
        $result = power_on($input);
    }
        else {
        # We are using the parallel version which has no feedback.
        # Assume success.
                old_reset($input);
        $result = 2;
        }

    if ($result == 2) { return "ACK"; }
    elsif ($result == 1) { return "NACK"; }
    else { return "ERR"; }
}

sub old_reset {
        my $input = shift();
        my $lp0 = "/dev/lp0";
        print "old_reset() $input->{serial}:$input->{board}:$input->{port} $lp0\n";

        # The $row is irrelevant because there is only one of them
        # THe reboot board address can be used to find the rack and port
        my $server = $input->{board} * 25 + $input->{port};
        my $str1 = sprintf("%0.2x", ($server));
        my $str2 = pack("H*", $str1);
        open OFH, ">$lp0"; print OFH $str2; close OFH;

        select(undef, undef, undef, 0.250);

        my $str3 = pack("H*", sprintf("%0.2x", "255"));
        open OFH, ">$lp0"; print OFH $str3; close OFH;

        my $str4 = pack("H*", "00");
        open OFH, ">$lp0"; print OFH $str4; close OFH;

        return 0;
}

# Send the communication packet and check for return
sub send_packet {

    # default values and initilization of variables
    my $input = shift();
    my $buffer;
    my $num_read;
    my $NAP_TIME = 1000000;
    my $BYTES_READ = 3;
    my $STX = chr(2);   # STX is 0x02
    my $ETX = chr(3);   # ETX is 0x03
    my $ACK = chr(6);   # ACK is 0x06
    my $NACK = chr(21); # NACK is 0x15

    # jc@05-05-2006: added wait times to this structure. the wait times vary
    #                according to the timing. Doing it this way will allow us
    #                to decrease the timeout if the board address does not
    #                exist.
    #                Default is 1 second (1000000)
    my $timings = {				# Timing values
        "00" => 0 + 1000000,		#   00H   0
        "01" => 100000 + 1000000,	 	#   01H   100 msec
        "02" => 250000 + 1000000,		#   02H   250 msec 
        "03" => 1000000 + 2000000,		#   03H   1 sec
        "04" => 2000000 + 1000000,		#   04H   2 sec
        "05" => 4000000 + 1000000,		#   05H   4 sec
        "06" => 6000000 + 7000000,		#   06H   6 sec
        "07" => 11000000 + 1000000,		#   07H   11 sec
    };

    # determined values depending on parsed data
    my $comport = $input->{serial};
    my $checksum = ($input->{board} + $input->{port} + $input->{time} + 32);
    # build the string to send
    my $hex_string = pack("A[1]C[4]A[1]",
          $STX,               # start transmission
	  $input->{board},    # rapid reboot board id
	  $input->{port},     # port id
	  $input->{time},     # duration of operation
	  $checksum,          # check sum
	  $ETX);              # end transmission

    # print out the sring so we can see what we are sending
    print "    HEX: " . unpack("H*", $hex_string) . "\n";

    # now open the comport and send the request
    open TTY, "+<$comport" || return 0;
    my $oldfh = select(TTY); $| = 1; select($oldfh);
    print TTY $hex_string;

    # wait for and capture a response
    eval {
        local $SIG{ALRM} = sub { die "alarm\n"; };
        ualarm($timings->{$input->{time}});
        if (!defined($num_read = sysread(TTY, $buffer, 3))) {
            $num_read = $!;
        };
	ualarm(0);
    };
    close TTY;

    usleep($NAP_TIME);

    # output results for trouble-shooting and send a return code
    if (!defined($num_read)) {
        # We did NOT get a return packet
        print "    Alarm went off before we received a return packet!,\n";
        print "    There may not be a board addressed " . $input->{board} . ".\n";
	return 0;
    } else {
        # We did get a return packet, so print it out
        print "    Return String: " . unpack("H*", $buffer)."\n";
        print "    Length       : " . $num_read . "\n";
        
	# Compare the results to what we expect to get
        my $result = substr($buffer,0,1);
	if (($result eq $ACK) && ($num_read == $BYTES_READ)) { return 2; }
	if (($result eq $NACK) && ($num_read == $BYTES_READ)) { return 1; }

	# if we get here then we did not get three bytes in the return packet
	# and/or the first byte was not an ACK or NACK
        print "    ERROR: Expecting an ACK or NACK with $BYTES_READ bytes\n";
	return 0;
    }

}


sub power_on {
    my $input = shift();

        my $comport = $input->{serial};
        print "    power_on() $comport:$input->{board}:$input->{port}\n";

    $input->{time} = "03"; # 1 second

    return send_packet($input);
}

sub power_off {
    my $input = shift();

        my $comport = $input->{serial};
        print "    power_off() $comport:$input->{board}:$input->{port}\n";

    $input->{time} = "06"; # 6 second

    return send_packet($input);
}

## MAIN ##

$macaddr = getmac();
$rebootServer = "Unknown";
@ports = ();
$power = 1;     # 0 = reset pins, 1 = power pins
$style = 1;     # 0 = LPT, 1 = serial

# reboot1.iad2
if ($macaddr eq "00:02:b3:ca:05:25") {
        $rebootServer = "reboot1.iad2";
        #@ports = qw(ttyS0 ttyS1 ttyS4 ttyS5 ttyS6 ttyS7);
        $power = 1;
        $style = 1;
}
# reboot1.sat3 (Paragon)
elsif ($macaddr eq "00:02:b3:a2:5a:04") {
        $rebootServer = "reboot1.sat3";
        #@ports = qw(ttyS0 ttyS1 ttyS4 ttyS5 ttyS6 ttyS7);
        $power = 0;
        $style = 1;
}
# reboot2.sat3 (tweeks system)
elsif ($macaddr eq "00:50:70:31:1e:b9") {
        $rebootServer = "reboot2.sat3";
        #@ports = ();
        $power = 0;
        $style = 0;
}
# reboot3.sat3 (Weston)
elsif ($macaddr eq "00:02:b3:48:46:32") {
        $rebootServer = "reboot3.sat3";
        #@ports = qw(ttyS0);
        $power = 1;
        $style = 1;
}
# booter2.sat5 (Paragon)
elsif ($macaddr eq "00:30:48:53:05:80") {
	$rebootServer = "booter2.sat5";
	#@ports = qw(ttyS0 ttyS1 ttyS4 ttyS5 ttyS6 ttyS7);
	$power = 0;
	$style = 1;
}
# booter1.sat5 (Weston)
elsif ($macaddr eq "00:30:48:52:6d:70") {
	$rebootServer = "booter1.sat5";
	#@ports = qw(ttyS0);
	$power = 1;
	$style = 1;
}
else {
        print "No match for $macaddr, using safe defaults\n";
        #@ports = qw(ttyS0 ttyS1 ttyS4 ttyS5 ttyS6 ttyS7);
        $power = 1;
        $style = 1;
}

if ($style == 1) {
    my @ttys = getSerialPorts();
    chdir("/dev");
    foreach (@ttys) {
        my $file = "ttyS$_";
        system("MAKEDEV $file") unless (-c "$file");
        system("stty","-F",$file,"raw");
        system("stty","-F",$file,"igncr");
        system("stty","-F",$file,"9600");
        push @ports, "/dev/".$file;
    }
}

print "Server: $rebootServer\n";
print "Serial: ".join(" ", @ports)."\n";
print "Power/Style: $power/$style\n";

if (-e "/etc/local.sh") {
    open LOCAL, "</etc/local.sh";
    my @local = <LOCAL>;
    close LOCAL;

    foreach (@local) {
        if (/^KSIPADDR=(.*)$/) { $ksipaddr = $1; }
    }
}

# No kickstart server, run in test mode
if (!$ksipaddr) { $ksipaddr = "127.0.0.1"; }

print "Kickstart: $ksipaddr\n";

chdir '/';
#open STDIN, "/dev/null";
#open STDOUT, ">/dev/null";
#open STDERR, '>&STDOUT';

my $sock = IO::Socket::INET->new(
        'LocalAddr' => '0.0.0.0',
        'LocalPort' => 2250,
        'Proto' => 'tcp',
        'Listen' => 100) or die "$!";

while (my $client = $sock->accept()) {
        if ($client->peerhost() eq $ksipaddr) {
                my $data = <$client>;
                chomp $data;
                print "Client: $data\n";
                my $parsed = parse($data);
                if ($parsed) {
            print "Parsed: ";
            while (my($n,$v) = each(%$parsed)) {
                print "'$n => $v' ";
            }
            print "\n";

            my $result = do_reboot($parsed);
            if ($result) {
                print $client "$data-$result\n";
            }
            else {
                print $client "$data-ERR\n";
            }
                } else {
                        print $client "ERR\n";
                }
        }
        close ($client);
}

close ($sock);

1;
