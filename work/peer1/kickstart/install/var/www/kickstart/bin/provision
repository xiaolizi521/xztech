#!/usr/bin/perl -w

BEGIN {
	use lib qw(/exports/kickstart/lib);
	require 'sbks.pm';
}

use strict;

my ( $dbh, $debug );

# MAIN

# need to add getopt() stuff for --debug and --cleanup

if ( is_running() ) { exit 0; }
$debug = 0;

if ( ( defined( $ARGV[0] ) ) && ( $ARGV[0] eq "-d" ) ) {
	$debug = 1;
}

dhcp_refresh();
$dbh = ks_dbConnect();

if ( provcheck($dbh) == 0 ) { $debug = 1; }

my @installs = get_ks_list($dbh);

# @servers is an array of MAC addresses
my $servers = $dbh->selectall_arrayref(
	"SELECT mac_address
    FROM kickstart_map
    WHERE new_status = 'updateks'
    AND mac_address NOT IN ('"
	  . join( "','", @{ $Config->{bootServerMacs} } ) . "')
    ORDER BY last_update"
);
my $total_servers = scalar( @{$servers} );
my $count         = 0;

foreach my $row ( @{$servers} ) {
	my $macaddr = $row->[0];
	my $tmp     = ++$count . " of " . $total_servers;
	print "Working on $macaddr ($tmp) .. ";

	my $macobj = MACFun->new( dbh => $dbh, macaddr => $macaddr );
	my $osload = $macobj->osload();
	my $pxe    = $macobj->pxe();
	my $task   = $macobj->task();
	my $last3  = $macobj->halfmac();
	$last3 =~ s/:/-/g;
	my $ulast = uc($last3);

	if ( grep( /^$osload$/, @installs ) ) {
		print "postconf .. ";
		my $postconf = fetch_postconf($macaddr);
		if ($postconf) { $macobj->postconf($postconf); }
		else {
			kslog( "info", "$macaddr failed to fetch postconf" );
			print "\n";
			next;
		}

		print "licenses .. ";

		my $licenses = fetch_licenses($macaddr);
		if ($licenses) { $macobj->licenses($licenses); }
		else {

			# Missing licenses only fatal for plesk and ensim
			if ( $postconf->{PANEL} =~ /plesk|ensim\d/i ) {
				kslog( "info", "$macaddr failed to fetch licenses" );
				next;
			}
		}
		$macobj->update();
	}

	print "\n";
	if ( $debug == 0 ) {
		print("Provisioning $macaddr ($osload) .. ");
		unlink("/exports/kickstart/status/kickdone/$last3.txt");
		unlink("/exports/kickstart/status/kickdone/$ulast.txt");
		kslog( 'info', "Provisioning: $macaddr with $osload" );

		my $RRonly = 0;
		if ( $macobj->osload() =~ /burnin|default|zerofill/ ) { $RRonly = 0; }

    kslog( 'info', "[$macaddr]: Updating pxe to $pxe" );
		$macobj->pxe($pxe);
		my $pxe_result = update_pxe( $macaddr, $pxe );
		print("update_pxe ($pxe_result) .. ");
		if ($pxe_result) {
      kslog( 'info', "[$macaddr]: Updating pxe done.. rebooting" );
			my $reboot_result = rebootByMac( $macaddr, $RRonly );
			print("reboot ($reboot_result).\n");

			# Swap VLAN after the reboot

			if ( grep( /^$osload$/, @installs )
				|| $osload =~ /burnin|default|zerofill/ )
			{
        kslog( 'info', "[$macaddr]: Setting port speed => 100, vlan => 405" );
				my $switchPortInfo = switchPortInfo($macaddr);
				portControl( $switchPortInfo, { speed => 100, vlan => 405 } );
			}
		}
		else {
			kslog( 'info', "$macaddr update_pxe failed" );
		}

		# Only uncomment these during a cleanup pass
		$macobj->ipaddr("0.0.0.0");

		#$macobj->status("new");
		#

		$macobj->update();
	}
	else {
		print("Provisioning: $macaddr ($osload) (debug)\n");
	}
}

$dbh->disconnect();

1;
