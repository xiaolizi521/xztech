#!/usr/local/bin/bash
sleep 10

set +e

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
CONTACT="PE (product-eng@peer1.com), PA (pa-dev@peer1.com)"
CUSTOMERS=(4 7000307)
PWD=$(/usr/bin/dirname $0)
is_customer_server=1

# Function that runs all of our post-install scripts.
run_scripts() {
	dir=$1
	cd $dir

	# Start executing scripts under our scripts directory
	for script in $(ls -1 | sort) ; do

		# Some sort of work-around for updates on RHEL4/5
		[ $RHEL4UP -eq 1 ] && [ $script != '00rhel4up.sh' ] && continue;

		# Set our script to executable and run it.
		chmod +x $script
		echo "Running ${script}"
		postlog "INFO" "Running ${script}"
		./$script

		# Note our exit code from the script that was run.
		res=$?

		# Delete successful script if a customer server.
                # Done so support doesn't re-run the scripts.
                # In reality, we should write our scripts in
                # scripts.d to handle being run more than once.
		if [ $res -eq 0 ] ; then
			# Only delete if a customer server
			if [ $is_customer_server -eq 1 ]; then
				rm -f ${script}
			fi
		# Catch any script failures.
		else
			echo "$script failed with status $res"
			postlog "FATAL" "$script failed with status $res"
			echo "$script $res" >> "${sbpost}/failed"
		fi
	done
}

#Find our active ethernet interface
MSG=$(dmesg | awk ' /Ethernet address/ { print $1 }' | sed 's/.\{1\}$//')
for i in $MSG; do
    if ifconfig $i | grep 'status: active' > /dev/null ; then
        IFACE=$i
        export IFACE
        break
    fi
done

#Function to grab our MAC address
getMAC() {
    MACADDR="$(ifconfig $IFACE | grep "ether" | awk '{ print $2 }' | tr A-Z a-z)"
    number="$(ifconfig $IFACE | grep "ether" | awk '{ print $2 }' | tr A-Z a-z | wc -l)"
    if [ -z "$MACADDR" ]; then
        echo "Unable to find our MAC Address in getMAC()" >&2
	exit 1
    elif [ $number -ne 1 ]; then
    	echo "We found $number MACs and we only want one. Something broke." >&2
	exit 1
    fi
    export MACADDR
}

#Function to grab our IP address
getIP() {
    IPADDR="$(ifconfig $IFACE | grep "inet" | awk '{print $2}' | cut -d: -f2)"
    number="$(ifconfig $IFACE | grep "inet" | awk '{print $2}' | cut -d: -f2 | wc -l)"
    if [ -z "$IPADDR" ]; then
        echo "Unable to find our IP Address in getIP()" >&2
	exit 1
    elif [ $number -ne 1 ]; then
    	echo "We found $number IPs and we only want one. Something broke." >&2
	exit 1
    fi
    export IPADDR
}

# Source any files under 'lib'
for lib in $(find ${PWD} | grep lib); do
    [ -f "$lib" ] && . "$lib"
done

export PATH SCRIPT_D sbpost

# Hopefully ${sbpost} is defined in sbks_lib.sh!
. "${sbpost}/postconf.info"

# the two functions export MACADDR and IPADDR
getMAC
getIP


# Make sure the above functions work.
if [ -z "$MACADDR" ]; then
	echo "Unable to find our MAC address." >&2
	exit 1
else
	echo "Found MAC address $MACADDR"
fi

if [ -z "$IPADDR" ]; then
	echo "Unable to find our IP address." >&2
	exit 1
else
	echo "Found IP address $IPADDR"
fi

# Determine if we are running on a customer server or known test server
if [ -z "$customer_number" ]; then
	for customer in ${CUSTOMERS[@]}; do
		if [ $customer_number -ne $customer ]; then
			continue
		else
			postMsg="This appears to be a TEST (${customer}) server."
			postMsg="${postMsg} Not deleting sbpost directory."
			echo ${postMsg}
			postlog "INFO" "${postMsg}"
			is_customer_server=0
			break
		fi
	done
else
	postMsg="\$customer_number not set. We will remove the sbpost directory"
	echo ${postMsg}
	postlog "INFO" "${postMsg}"
fi

# Create file to write failures from above function
# Also creates a running file, but we do not log to it.
echo -n > "${sbpost}/failed"
echo -n > "${sbpost}/running"

# Make sure we have network connectivity.
retries=0
res=0
while [ $retries -lt 5 ] && [ $res -ne 0 ]; do
	ping -c1 -i5 ${ks_public_ipaddr}
	res=$?
	retries=$(($retries + 1))
	echo "Tried to reach kickstart $retries time(s)"
	postlog "INFO" "Tried to reach kickstart $retries time(s)"

	echo "Server IP is $IPADDR"
	postlog "INFO" "Server IP is $IPADDR"

	echo "Sleeping for a bit..."
	postlog "INFO" "Sleeping for a bit..."
	sleep 2
done
if [ $res -ne 0 ] ; then
	echo "Cannot contact kickstart server, possible network problem."
	echo "Check that the server has not been moved to the wrong VLAN."
	echo "If the server appears to be on the proper VLAN, this is"
	echo "probably a network problem."
	echo
	echo -n "Press any key to continue .. "
	read FOO
fi

# If we have connectivity, tell Kickstat we're in postboot
fetch "http://${ks_public_ipaddr}/cgi-bin/register.cgi" \
	"macaddr=${MACADDR}&ipaddr=${IPADDR}&status=postboot"

postMsg="Syncing hardware clock to time.nist.gov"
echo ${postMsg}
postlog "INFO" "${postMsg}"
ntpdate -u -b time.nist.gov

postMsg="Restarting time-dependent services"
echo ${postMsg}
postlog "INFO" "${postMsg}"

# CPanel b0rks the resolv.conf
cp -f /etc/resolv.conf /etc/resolv.conf.SB

# Run our postboot scripts if present.
if [ -d "${sbpost}/script.d" ] ; then
	postMsg="Running postboot scripts in ${sbpost}/script.d"
	echo ${postMsg}
	postlog "INFO" "${postMsg}"
	run_scripts "${sbpost}/script.d"
else
	postMsg="No postboot scripts present. Skipping."
	echo ${postMsg}
	postlog "INFO" "No postboot scripts present. Skipping."
fi

# If ${sbpost}/failed has anything in it, set status to failed.
if [ -s "${sbpost}/failed" ] ; then
	STATUS="ksfail"
else
	STATUS="kickstarted"
fi

# Restore our resolv.conf from the cPanel issue
cp -f /etc/resolv.conf.SB /etc/resolv.conf

#Download the newst ports tree
echo "Downloading the latest ports tar ball"
wget -O /ports.tar.gz ftp://ftp.freebsd.org/pub/FreeBSD/ports/ports-current/ports.tar.gz
echo "Extracting the ports tree into /usr/ports"
/usr/local/sbpost/bar -n /ports.tar.gz | tar -C /usr/ -pxzf -
#tar -xf /ports.tar.gz -C /usr/
echo "Done extracting ports collection"

#Remove previsouly installed packages, and only leave behind the one we specify
echo "Removing the all non-essential packages created during install"
#pkg_info | awk '{ print $1 }' | xargs pkg_delete
echo "Installing necessary packages: sudo, cvsup, and ntp"
#packages="sudo cvsup-without-gui ntp"
#for installs in $packages; do
#	pkg_add -r $installs
#done

# Report back to the kickstart server
fetch "http://${ks_public_ipaddr}/cgi-bin/register.cgi" \
	"macaddr=${MACADDR}&status=kickstarted"

# Cleanup time!
echo -n > /var/log/wtmp
rm -f /root/.bash_history
rm -f /home/beach/.bash_history

# If status is kickstarted (completed) and this is a customer server
# proceed with the cleanup of the system.
if [ "${STATUS}" == "kickstarted" ] ; then
	# Add ONLINE=*unix time* to /boot/.serverbeach so we know when it finished
	online=`date "+%s"`
	echo "ONLINE=$online" >> /boot/.serverbeach

	# Keep the following around if this is a dev server.
        if [ $is_customer_server -eq 1 ] ; then
	        rm -f /etc/resolv.conf.new
	        rm -rf ${sbpost}
	        rm -f /tmp/*
	        rm -f $0

		# Remove installer and error logs
		rm -f /root/anaconda-ks.cfg
		rm -f /root/install.log
		rm -f /root/install.log.syslog
		rm -f /var/log/lasterror
	fi

#System will now halt until the workflow reboots the server
echo "Changing status of server and halting"
halt

else
	# If status is not kickstarted, stop so it can be troubleshot.
	echo "Something went wrong when trying to run $0"
	echo "Please check and report the contents of ${sbpost}/failed and"
	echo "${postboot_log} to ${CONTACT}..."
	read FOO
	exit 1
fi

exit 0
