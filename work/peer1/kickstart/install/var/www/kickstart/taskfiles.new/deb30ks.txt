#!/bin/bash
# =======================================================================
# Company:              ServerBeach
# Copyright(c):         ServerBeach, Ltd. 2006-2008
# Project:              Kickstart Sub-System
# Pri. Code Devloper:   SB Development Team
# Creation Date:        ~2006-09-14
#
# File Type:            Taskfile     
# File Name:            deb31ks.txt
# Dependencies:         The SBRescue PXE RAM Disk Envrionment.    
#
# Discription:
# This is the deb31ks task file the gets loaded and executed on a local
# server by the SBRescue ram disk image.  
# =======================================================================

# Source the following files and include them as part of this script
. /etc/local.sh
. /usr/lib/sbks_lib.sh

# Export the following environment variable
export KSIPADDR MACADDR IPADDR REALIP

#Variable declaration
target="/mnt"
export target

# Register the current state of the kick using register.cgi
# By calling this web cgi that sits on the KS server it can register the current state of the kick.
post "http://${KSIPADDR}/cgi-bin/register.cgi" "macaddr=${MACADDR}&ipaddr=${REALIP}&status=ksscript"

### PREINSTALL ###

# Make sure we have discs :)
havepata=0
havesata=0
postlog "INFO" "Checking for existence of drives"
fdisk -l /dev/hda | grep ^Disk >/dev/null && havepata=1
fdisk -l /dev/sda | grep ^Disk >/dev/null && havesata=1

if [ $havepata -eq 1 ] ; then
    disc="/dev/hda"
    hdparm -d1 $disc
elif [ $havesata -eq 1 ] ; then
    disc="/dev/sda"
else
    postlog "ERR" "No PATA or SATA/SCSI drives found"
fi

# Partition
bootpart="${disc}1"
swappart="${disc}2"
rootpart="${disc}3"

partprobe

postlog "INFO" "Getting drive geometry for $disc"
GEOM=`parted -s $disc print | grep geometry | cut -d" " -f5`
EOD=`echo $GEOM | cut -d- -f2`

postlog "INFO" "Creating partitions on $disc"
parted -s ${disc} mklabel msdos
parted -s ${disc} mkpart primary 0 75
parted -s ${disc} mkpart primary linux-swap 76 1100
parted -s ${disc} mkpart primary 1101 ${EOD}   

postlog "INFO" "Setting filesystem flags on $disc "
parted -s ${disc} set 1 boot on
parted -s ${disc} print

# dm@10-20-2006: mke2fs seems to have problems with sata, using mkfs instead
postlog "INFO" "Creating filesystem on $bootpart"
mkfs -t ext3 ${bootpart} >>/dev/null 2>&1

# dm@10-20-2006: mke2fs seems to have problems with sata, using mkfs instead
postlog "INFO" "Creating filesystem on $rootpart"
mkfs -t ext3 ${rootpart} >>/dev/null 2>&1

# dm@10-20-2006: force STDOUT to null device
postlog "INFO" "Creating swap space on $swappart"
mkswap ${swapparta} >>/dev/null 2>&1

postlog "INFO" "Mounting filesystems"
mount -t ext3 ${rootpart} ${target}
mkdir ${target}/boot
mount -t ext3 ${bootpart} ${target}/boot

postlog "INFO" "Verifying mount of / filesystem ($rootpart)"
touch $target/rootfile
df $target/rootfile | grep ^$rootpart > /dev/null
if [ $? -eq 0 ] ; then
    postlog "INFO" "Root partition mounted successfully"
    rm -f $target/rootfile
else
    postlog "ERR" "Root partition not mounted!"
fi

postlog "INFO" "Verifying mount of /boot filesystem ($bootpart)"
touch $target/boot/bootfile
df $target/boot/bootfile | grep ^$bootpart > /dev/null
if [ $? -eq 0 ] ; then
    postlog "INFO" "Boot partition mounted successfully"
    rm -f $target/boot/bootfile
else
    postlog "ERR" "Boot partition not mounted!"
fi

mkdir -p ${target}/proc
mount -t proc proc ${target}/proc

### END PREINSTALL ###

sbpost="/usr/local/sbpost"
postconf="$sbpost/postconf.info"
export sbpost postconf

postlog "INFO" "Fetching postconf information to set hostname"
mkdir -p "$target/$sbpost"
post "http://${KSIPADDR}/cgi-bin/postconf.cgi" "macaddr=$MACADDR&update=no" "$target/$postconf"
. "$target/$postconf"

#if [ $customer_number -eq 4 ] ; then
#    echo "Debugging for customer 4, press any key"
#    read FOO
#fi

hostname "${HOST}.${DOMAIN}"

### DEBINSTALL ###

#OPTS="--flavour=minimal --arch=i386 "
OPTS="--arch i386 --exclude=lilo,pcmcia-cs,ppp,pppconfig,pppoe,pppoeconf"
DIST="sarge"
#jcalleja@2006-09-03 trying a different mirror
MIRROR="http://mirror.peer1.net/debian/"
#MIRROR="http://ftp.egr.msu.edu/debian/"
export http_proxy="http://${KSIPADDR}:9900/"

postlog "INFO" "Bootstrapping $DIST to $target using $MIRROR"
#/usr/bin/cdebootstrap $OPTS $DIST $target $MIRROR
/usr/sbin/debootstrap $OPTS $DIST $target $MIRROR

if [ $? -eq 0 ] ; then
    postlog "INFO" "debootstrap exited successfully"
else
    postlog "ERR" "debootstrap failed"
fi

unset http_proxy

cat <<FSTAB > "$target/etc/fstab"
$rootpart   /       ext3    errors=remount-ro   0 1
proc        /proc   proc    defaults            0 0
$swappart   none    swap    sw                  0 0
$bootpart   /boot   ext3    defaults            0 2
FSTAB

cat <<SOURCES > "$target/etc/apt/sources.list"
deb http://mirrors.kernel.org/debian $DIST main contrib non-free
deb http://non-us.debian.org/debian-non-US $DIST/non-US main contrib non-free
deb http://security.debian.org/ $DIST/updates main contrib non-free
SOURCES

get "http://$KSIPADDR/installs/linux/debian/3.1/selections.txt" "$target/tmp/selections.txt"

cat >"$target/tmp/upgrade.txt" <<UPGRADE
#!/bin/bash

DEBIAN_FRONTEND="noninteractive"
export DEBIAN_FRONTEND
export http_proxy="http://${KSIPADDR}:9900/"
export rootdisc=$disc

# Pull in our selected packages
#dpkg --set-selections </tmp/selections.txt
apt-get update
apt-get -y dselect-upgrade
apt-get -y --force-yes install curl grub initrd-tools libcrypt-passwdmd5-perl libwww-perl ntp-simple perl perl-modules rsync ssh vim sudo screen libssl-dev openssl hdparm libcrypt-passwdmd5-perl libwww-perl vim libdb1-compat libc6 libss2 libtext-iconv-perl

echo "do_initrd = yes" >> /etc/kernel-img.conf
# This is needed so mkinitrd and grub-install can find the root device
#kver="2.6.8"
#ksub="2"
#karch="686"
#ksmp=""
kver="2.6"
karch="686"
ksmp=""

numprocs=`grep -c ^processor /proc/cpuinfo`
[ \${numprocs} -gt 1 ] && ksmp="-smp"

# dm@10-23-2006: doesn't consider more than one athlon processor being reported
proctype=`grep -c Athlon /proc/cpuinfo`
[ \$proctype -gt 1 ] && karch="k7"

#dm@10-19-2006 9:00pm: dual core processors return back a ton of text
# and the original line did not convert the value to a numerical value!
# thus it NEVER installs the kernel!
proctype=`grep "Opteron" /proc/cpuinfo >> /dev/null && echo 1 || echo 0`
[ \$proctype -eq 1 ] && karch="k7"

echo n | apt-get -y install kernel-image-\$kver-\$karch\$ksmp 
    #kernel-headers-\$kver-\$ksub-\$karch\$ksmp \
    #kernel-tree-\$kver


ln -sf /proc/mounts /etc/mtab
# Install grub for the first time
grub-install \$rootdisc
# Generate our first menu.lst
echo y | update-grub

# Fix the root device and add "nomce"
#perl -ne 's/^(# kopt=root=\/dev\/hda)\d\s(.*)/\${1}3 \$2 nomce/; print \$_' </boot/grub/menu.lst >/tmp/menu.lst
#mv /tmp/menu.lst /boot/grub/menu.lst

# Update with new root device
#update-grub
#grub-install /dev/hda || grub-install /dev/sda


rm -f /etc/mtab
#/etc/init.d/ntp-server stop
#/etc/init.d/ssh stop
#/etc/init.d/postfix stop

UPGRADE

mount -t proc proc ${target}/proc

chmod +x "$target/tmp/upgrade.txt"
chroot $target /tmp/upgrade.txt

### END DEBINSTALL ###

postlog "INFO" "Setting up postboot environment (sbpost)"
get "http://$KSIPADDR/installs/modules/sbpost.tgz" "/tmp/sbpost.tgz"
tar -C $target -zxvf /tmp/sbpost.tgz

postlog "INFO" "Fetching postconf information"
mkdir -p "$target/$sbpost"
post "http://${KSIPADDR}/cgi-bin/postconf.cgi" "macaddr=$MACADDR" "$target/$postconf"
. "$target/$postconf"

cat <<LOCAL > "$target/usr/local/sbpost/lib/local.sh"
KSIPADDR=${KSIPADDR}
LOCAL

### POSTINSTALL ###

postlog "INFO" "Fetching postinstall script"
get "http://${KSIPADDR}/installs/linux/debian/3.1/postinstall.txt" "${target}/tmp/postinstall.txt"

postlog "INFO" "Executing postinstall script"
chmod +x "$target/tmp/postinstall.txt"
chroot $target /tmp/postinstall.txt

## crazy debugging 

#echo " call nate he forgot to remove debug code from deb31ks.txt"
#read darnitallagain
## /crazy debugging

if [ -e "${target}/tmp/alldone" ] ; then
    fuser -k -9 ${target}
    rm -rf "${target}/tmp/*"
    umount ${target}/boot
    umount ${target}/proc
    umount ${target}
    sync
    postlog "INFO" "Done"
    shutdown -rn now
fi

exit 0
