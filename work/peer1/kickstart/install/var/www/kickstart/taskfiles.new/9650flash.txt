#!/bin/bash
# Taskfile to update the firmware of the 9650
# jbair@2008-11-07

# Get our KSIPADDR
. /etc/local.sh

# Make sure the card is installed. Only checking against driver itself.
raidchk=$(dmesg | grep 3w-9xxx)
if [ -z "$raidchk" ]; then
	echo 'ERROR: 9650 RAID card not installed/found!' >&2
	echo 'Exiting.' >&2
	exit 1
fi

# Find our firmware version
fwver=$(dmesg | grep 3w-9xxx | grep -i firmware | awk '{ print $5 }' | cut -d , -f 1)

# If not found, exit. We should always find this.
if [ -z "$fwver" ]; then
        echo "ERROR: Unable to find firmware version." >&2
        echo "Exiting." >&2
        exit 1
fi

# Verify we need an upgrade.
if [ "$fwver" == "4.06.00.004" ]; then
        echo "INFO: This RAID card already has firmware version $fwver"
        echo "No need to update. Exiting."
        exit 0
fi

# Proceed with flashing if needed.
# Move into /tmp
cd /tmp/

# Find which IP to use to get our files. Ping kickstart and check the exit code.
# THIS WILL BREAK IF WE EVER SET KICKSTART TO IGNORE ICMP REQUESTS
if [ -n "$KSIPADDR" ]; then
        # ping it, if no response, exit code is not 0
        ping -c 2 "$KSIPADDR" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
                ourksip=$KSIPADDR
        # If we can't ping KSIPADDR, try ks_public_ipaddr
        else
                if [ -n "$ks_public_ipaddr" ]; then
                        ping -c 2 "$ks_public_ipaddr" > /dev/null 2>&1
                        if [ $? -eq 0 ]; then
                                ourksip=$ks_public_ipaddr
                        # If we get here, neither IP responded back.
                        else
                                echo "Not getting a ping back from kickstart from either $KSIPADDR or $ks_public_ipaddr" >&2
                                echo 'Exiting.' >&2
                                exit 1
                        fi
                else

                        echo "Our private kickstart IP $KSIPADDR is not pinging back and we cannot find our public IP to kickstart." >&2
                        echo 'Exiting.' >&2
                        exit 1
                fi
        fi
else
        # In case we ever get the public IP and not the Private IP
        if [ -n "$ks_public_ipaddr" ]; then
                ping -c 2 "$ks_public_ipaddr" > /dev/null 2>&1 > /dev/null 2>&1
                if [ $? -eq 0 ]; then
                        ourksip=$ks_public_ipaddr
                else
                        echo "Our public kickstart IP $ks_public_ipaddr is not pinging back and we cannot find our private IP to kickstart." >&2
                        echo 'Exiting.' >&2
                        exit 1
                fi
        else
                echo 'Cannot find any IPs for kickstart.' >&2
                echo 'Exiting.' >&2
                exit 1
        fi
fi


# Pull down our files to flash the system.
# We should really add something to local to always pull down RAID utils.
if [ -n "$ourksip" ]; then
        wget http://${ourksip}/kickstart/taskfiles.new/devices/13c1/1004/flashfw.bz2 > /dev/null 2>&1
else
        echo 'ERROR: Unable to find the IP to Kickstart.' >&2
        echo 'Exiting.' >&2
        exit 1
fi

# Make sure we got our files.
if [ $? -eq 0 ]; then
	echo 'SUCCESS: Downloaded our flashing utilities.'
else
	echo 'ERROR: Unable to download our flashing utilities.' >&2
	echo 'Exiting.' >&2
	exit 1
fi

# Untar/bzip our files.
tar -xjf flashfw.bz2 > /dev/null 2>&1

# Make sure it untarred our package.
if [ $? -eq 0 ]; then
	echo 'SUCCESS: Extracted our flashing utilities.'
else
	echo 'ERROR: Unable to extract our flashing utilities.' >&2
	echo 'Exiting.' >&2
	exit 1
fi

# Make sure our files are there. If they are, start the flashing procedure.
if [ -s /tmp/tw_update ] && [ -s /tmp/prom0006.img ]; then
	echo -e 'Beginning flash of our 9650 RAID card.\n'
	echo 'You will have to press Y and enter when asked to continue with the flash.'
else
	echo 'ERROR: Files we need to flash were not found after extraction.' >&2
	echo 'Exiting.' >&2
	exit 1
fi

# Invoke the flashing utility. Note that this could be automated within a screen, but it's 
# probably better we have DCO interact with it in case something goes awry (they can see 
# what's going on). There's no way to tell if $? will return non-zero if something goes bad.
/tmp/tw_update fw=/tmp/prom0006.img

# Print our own message after the utility finishes and exit out.
echo 'Flashing completed! If any errors were given during the flash, please take note of them.'
echo 'If no errors were given, please reboot the system now so the firmware update can take effect.'
exit 0
