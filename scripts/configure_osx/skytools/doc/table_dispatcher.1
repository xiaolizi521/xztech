.\"     Title: table_dispatcher
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 09/22/2008
.\"    Manual: 
.\"    Source: 
.\"
.TH "TABLE_DISPATCHER" "1" "09/22/2008" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
table_dispatcher - PgQ consumer that is used to write source records into partitoned table.
.SH "SYNOPSIS"
.sp
.RS 4
.nf
table_dispatcher\.py [switches] config\.ini
.fi
.RE
.SH "DESCRIPTION"
table_dispatcher is PgQ consumer that reads url encoded records from source queue and writes them into partitioned tables according to configuration file\. Used to partiton data\. For example change log\'s that need to kept online only shortly can be written to daily tables and then dropped as they become irrelevant\. Also allows to select which columns have to be written into target database Creates target tables according to configuration file as needed\.
.sp
.SH "QUICK-START"
Basic table_dispatcher setup and usage can be summarized by the following steps:
.sp
.sp
.RS 4
\h'-04' 1.\h'+02'PgQ must be installed in source database\. See pgqadm man page for details\. Target database must have
pgq_ext
schema installed\.
.RE
.sp
.RS 4
\h'-04' 2.\h'+02'edit a table_dispatcher configuration file, say table_dispatcher_sample\.ini
.RE
.sp
.RS 4
\h'-04' 3.\h'+02'create source queue
.sp
.RS 4
.nf
$ pgqadm\.py ticker\.ini create <queue>
.fi
.RE
.RE
.sp
.RS 4
\h'-04' 4.\h'+02'launch table dispatcher in daemon mode
.sp
.RS 4
.nf
$ table_dispatcher\.py table_dispatcher_sample\.ini \-d
.fi
.RE
.RE
.sp
.RS 4
\h'-04' 5.\h'+02'start producing events
.RE
.SH "CONFIG"
.SS "Common configuration parameters"
.PP
job_name
.RS 4
Name for particulat job the script does\. Script will log under this name to logdb/logserver\. The name is also used as default for PgQ consumer name\. It should be unique\.
.RE
.PP
pidfile
.RS 4
Location for pid file\. If not given, script is disallowed to daemonize\.
.RE
.PP
logfile
.RS 4
Location for log file\.
.RE
.PP
loop_delay
.RS 4
If continuisly running process, how long to sleep after each work loop, in seconds\. Default: 1\.
.RE
.PP
connection_lifetime
.RS 4
Close and reconnect older database connections\.
.RE
.PP
use_skylog
.RS 4
foo\.
.RE
.SS "Common PgQ consumer parameters"
.PP
pgq_queue_name
.RS 4
Queue name to attach to\. No default\.
.RE
.PP
pgq_consumer_id
.RS 4
Consumers ID to use when registering\. Default: %(job_name)s
.RE
.SS "table_dispatcher parameters"
.PP
src_db
.RS 4
Source database\.
.RE
.PP
dst_db
.RS 4
Target database\.
.RE
.PP
dest_table
.RS 4
Where to put data\. when partitioning, will be used as base name
.RE
.PP
part_field
.RS 4
date field with will be used for partitioning\.
.RE
.PP
part_template
.RS 4
SQL code used to create partition tables\. Various magic replacements are done there:
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
_PKEY
T}:T{
comma separated list of primery key columns\.
T}
T{
_PARENT
T}:T{
schema\-qualified parent table name\.
T}
T{
_DEST_TABLE
T}:T{
schema\-qualified partition table\.
T}
T{
_SCHEMA_TABLE
T}:T{
same as
\fIDEST_TABLE but dots replaced with "_\fR", to allow use as index names\.
T}
.TE
.sp
.RE
.SS "Example config"
.sp
.RS 4
.nf
[table_dispatcher]
job_name          = table_dispatcher_source_table_targetdb
.fi
.RE
.sp
.RS 4
.nf
src_db            = dbname=sourcedb
dst_db            = dbname=targetdb
.fi
.RE
.sp
.RS 4
.nf
pgq_queue_name    = sourceq
.fi
.RE
.sp
.RS 4
.nf
logfile           = log/%(job_name)s\.log
pidfile           = pid/%(job_name)s\.pid
.fi
.RE
.sp
.RS 4
.nf
# where to put data\.  when partitioning, will be used as base name
dest_table        = orders
.fi
.RE
.sp
.RS 4
.nf
# names of the fields that must be read from source records
fields            = id, order_date, customer_name
.fi
.RE
.sp
.RS 4
.nf
# date field with will be used for partitioning
part_field        = order_date
.fi
.RE
.sp
.RS 4
.nf
# template used for creating partition tables
part_template     =
     create table _DEST_TABLE () inherits (orders);
     alter table only _DEST_TABLE add constraint _DEST_TABLE_pkey primary key (id);
     grant select on _DEST_TABLE to group reporting;
.fi
.RE
.SH "COMMAND LINE SWITCHES"
Following switches are common to all skytools\.DBScript\-based Python programs\.
.PP
\-h, \-\-help
.RS 4
show help message and exit
.RE
.PP
\-q, \-\-quiet
.RS 4
make program silent
.RE
.PP
\-v, \-\-verbose
.RS 4
make program more verbose
.RE
.PP
\-d, \-\-daemon
.RS 4
make program go background
.RE
.sp
Following switches are used to control already running process\. The pidfile is read from config then signal is sent to process id specified there\.
.PP
\-r, \-\-reload
.RS 4
reload config (send SIGHUP)
.RE
.PP
\-s, \-\-stop
.RS 4
stop program safely (send SIGINT)
.RE
.PP
\-k, \-\-kill
.RS 4
kill program immidiately (send SIGTERM)
.RE
.SH "LOGUTRIGA EVENT FORMAT"
PgQ trigger function pgq\.logutriga() sends table change event into queue in following format:
.PP
ev_type
.RS 4

(op || ":" || pkey_fields)\. Where op is either "I", "U" or "D", corresponging to insert, update or delete\. And
pkey_fields
is comma\-separated list of primary key fields for table\. Operation type is always present but pkey_fields list can be empty, if table has no primary keys\. Example:
I:col1,col2
.RE
.PP
ev_data
.RS 4
Urlencoded record of data\. It uses db\-specific urlecoding where existence of
\fI=\fR
is meaningful \- missing
\fI=\fR
means NULL, present
\fI=\fR
means literal value\. Example:
id=3&name=str&nullvalue&emptyvalue=
.RE
.PP
ev_extra1
.RS 4
Fully qualified table name\.
.RE
