.\"     Title: queue_splitter
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 09/22/2008
.\"    Manual: 
.\"    Source: 
.\"
.TH "QUEUE_SPLITTER" "1" "09/22/2008" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
queue_splitter - PgQ consumer that transports events from one queue into several target queues
.SH "SYNOPSIS"
.sp
.RS 4
.nf
queue_splitter\.py [switches] config\.ini
.fi
.RE
.SH "DESCRIPTION"
queue_spliter is PgQ consumer that transports events from source queue into several target queues\. ev_extra1 field in each event shows into which target queue it must go\. (pgq\.logutriga() puts there the table name\.)
.sp
One use case is to move events from OLTP database to batch processing server\. By using queue spliter it is possible to move all kinds of events for batch processing with one consumer thus keeping OLTP database less crowded\.
.sp
.SH "QUICK-START"
Basic queue_splitter setup and usage can be summarized by the following steps:
.sp
.sp
.RS 4
\h'-04' 1.\h'+02'pgq must be installed both in source and target databases\. See pgqadm man page for details\. Target database must also have pgq_ext schema installed\.
.RE
.sp
.RS 4
\h'-04' 2.\h'+02'edit a queue_splitter configuration file, say queue_splitter_sourcedb_sourceq_targetdb\.ini
.RE
.sp
.RS 4
\h'-04' 3.\h'+02'create source and target queues
.sp
.RS 4
.nf
$ pgqadm\.py ticker\.ini create <queue>
.fi
.RE
.RE
.sp
.RS 4
\h'-04' 4.\h'+02'launch queue splitter in daemon mode
.sp
.RS 4
.nf
$ queue_splitter\.py queue_splitter_sourcedb_sourceq_targetdb\.ini \-d
.fi
.RE
.RE
.sp
.RS 4
\h'-04' 5.\h'+02'start producing and consuming events
.RE
.SH "CONFIG"
.SS "Common configuration parameters"
.PP
job_name
.RS 4
Name for particulat job the script does\. Script will log under this name to logdb/logserver\. The name is also used as default for PgQ consumer name\. It should be unique\.
.RE
.PP
pidfile
.RS 4
Location for pid file\. If not given, script is disallowed to daemonize\.
.RE
.PP
logfile
.RS 4
Location for log file\.
.RE
.PP
loop_delay
.RS 4
If continuisly running process, how long to sleep after each work loop, in seconds\. Default: 1\.
.RE
.PP
connection_lifetime
.RS 4
Close and reconnect older database connections\.
.RE
.PP
use_skylog
.RS 4
foo\.
.RE
.SS "Common PgQ consumer parameters"
.PP
pgq_queue_name
.RS 4
Queue name to attach to\. No default\.
.RE
.PP
pgq_consumer_id
.RS 4
Consumers ID to use when registering\. Default: %(job_name)s
.RE
.SS "queue_splitter parameters"
.PP
src_db
.RS 4
Source database\.
.RE
.PP
dst_db
.RS 4
Target database\.
.RE
.SS "Example config file"
.sp
.RS 4
.nf
[queue_splitter]
job_name        = queue_spliter_sourcedb_sourceq_targetdb
.fi
.RE
.sp
.RS 4
.nf
src_db          = dbname=sourcedb
dst_db          = dbname=targetdb
.fi
.RE
.sp
.RS 4
.nf
pgq_queue_name  = sourceq
.fi
.RE
.sp
.RS 4
.nf
logfile         = ~/log/%(job_name)s\.log
pidfile         = ~/pid/%(job_name)s\.pid
.fi
.RE
.SH "COMMAND LINE SWITCHES"
Following switches are common to all skytools\.DBScript\-based Python programs\.
.PP
\-h, \-\-help
.RS 4
show help message and exit
.RE
.PP
\-q, \-\-quiet
.RS 4
make program silent
.RE
.PP
\-v, \-\-verbose
.RS 4
make program more verbose
.RE
.PP
\-d, \-\-daemon
.RS 4
make program go background
.RE
.sp
Following switches are used to control already running process\. The pidfile is read from config then signal is sent to process id specified there\.
.PP
\-r, \-\-reload
.RS 4
reload config (send SIGHUP)
.RE
.PP
\-s, \-\-stop
.RS 4
stop program safely (send SIGINT)
.RE
.PP
\-k, \-\-kill
.RS 4
kill program immidiately (send SIGTERM)
.RE
.SH "USECASE"
How to to process events created in secondary database with several queues but have only one queue in primary database\. This also shows how to insert events into queues with regular SQL easily\.
.sp
.sp
.RS 4
.nf
CREATE SCHEMA queue;
CREATE TABLE queue\.event1 (
     \-\- this should correspond to event internal structure
     \-\- here you can put checks that correct data is put into queue
     id int4,
     name text,
     \-\- not needed, but good to have:
     primary key (id)
);
\-\- put data into queue in urlencoded format, skip actual insert
CREATE TRIGGER redirect_queue1_trg BEFORE INSERT ON queue\.event1
FOR EACH ROW EXECUTE PROCEDURE pgq\.logutriga(\'singlequeue\', \'SKIP\');
\-\- repeat the above for event2
.fi
.RE
.sp
.RS 4
.nf
\-\- now the data can be inserted:
INSERT INTO queue\.event1 (id, name) VALUES (1, \'user\');
.fi
.RE
.sp
If the queue_splitter is put on "singlequeue", it spreads the event on target to queues named "queue\.event1", "queue\.event2", etc\. This keeps PgQ load on primary database minimal both CPU\-wise and maintenance\-wise\.
.sp
