.\"     Title: cube_dispatcher
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 09/22/2008
.\"    Manual: 
.\"    Source: 
.\"
.TH "CUBE_DISPATCHER" "1" "09/22/2008" "" ""
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
cube_dispatcher - PgQ consumer that is used to write source records into partitoned tables
.SH "SYNOPSIS"
.sp
.RS 4
.nf
cube_dispatcher\.py [switches] config\.ini
.fi
.RE
.SH "DESCRIPTION"
cube_dispatcher is PgQ consumer that reads url encoded records from source queue and writes them into partitioned tables according to configuration file\. Used to prepare data for business intelligence\. Name of the table is read from producer field in event\. Batch creation time is used for partitioning\. All records created in same day will go into same table partion\. If partiton does not exist cube dispatcer will create it according to template\.
.sp
Events are usually procuded by pgq\.logutriga()\. Logutriga adds all the data of the record into the event (also in case of updates and deletes)\.
.sp
cube_dispatcher can be used in to modes:
.PP
keep_all
.RS 4
keeps all the data that comes in\. If record is updated several times during one day then table partiton for that day will contain several instances of that record\.
.RE
.PP
keep_latest
.RS 4
only last instance of each record is kept for each day\. That also means that all tables must have primary keys so cube dispatcher can delete previous versions of records before inserting new data\.
.RE
.SH "QUICK-START"
Basic cube_dispatcher setup and usage can be summarized by the following steps:
.sp
.sp
.RS 4
\h'-04' 1.\h'+02'pgq and logutriga must be installed in source databases\. See pgqadm man page for details\. target database must also have pgq_ext schema\.
.RE
.sp
.RS 4
\h'-04' 2.\h'+02'edit a cube_dispatcher configuration file, say cube_dispatcher_sample\.ini
.RE
.sp
.RS 4
\h'-04' 3.\h'+02'create source queue
.sp
.RS 4
.nf
$ pgqadm\.py ticker\.ini create <queue>
.fi
.RE
.RE
.sp
.RS 4
\h'-04' 4.\h'+02'create target database and parent tables in it\.
.RE
.sp
.RS 4
\h'-04' 5.\h'+02'launch cube dispatcher in daemon mode
.sp
.RS 4
.nf
$ cube_dispatcher\.py cube_dispatcher_sample\.ini \-d
.fi
.RE
.RE
.sp
.RS 4
\h'-04' 6.\h'+02'start producing events (create logutriga trggers on tables) CREATE OR REPLACE TRIGGER trig_cube_replica AFTER INSERT OR UPDATE ON some_table FOR EACH ROW EXECUTE PROCEDURE pgq\.logutriga(\fI<queue>\fR)
.RE
.SH "CONFIG"
.SS "Common configuration parameters"
.PP
job_name
.RS 4
Name for particulat job the script does\. Script will log under this name to logdb/logserver\. The name is also used as default for PgQ consumer name\. It should be unique\.
.RE
.PP
pidfile
.RS 4
Location for pid file\. If not given, script is disallowed to daemonize\.
.RE
.PP
logfile
.RS 4
Location for log file\.
.RE
.PP
loop_delay
.RS 4
If continuisly running process, how long to sleep after each work loop, in seconds\. Default: 1\.
.RE
.PP
connection_lifetime
.RS 4
Close and reconnect older database connections\.
.RE
.PP
use_skylog
.RS 4
foo\.
.RE
.SS "Common PgQ consumer parameters"
.PP
pgq_queue_name
.RS 4
Queue name to attach to\. No default\.
.RE
.PP
pgq_consumer_id
.RS 4
Consumers ID to use when registering\. Default: %(job_name)s
.RE
.SS "Config options specific to cube_dispatcher"
.PP
src_db
.RS 4
Connect string for source database where the queue resides\.
.RE
.PP
dst_db
.RS 4
Connect string for target database where the tables should be created\.
.RE
.PP
mode
.RS 4
Operation mode for cube_dispatcher\. Either
keep_all
or
keep_latest\.
.RE
.PP
dateformat
.RS 4
Optional parameter to specify how to suffix data tables\. Default is
YYYY_MM_DD
which creates per\-day tables\. With
YYYY_MM
per\-month tables can be created\. If explicitly set empty, partitioning is disabled\.
.RE
.PP
part_template
.RS 4
SQL fragment for table creation\. Various magic replacements are done there:
.TS
tab(:);
lt lt
lt lt
lt lt
lt lt.
T{
_PKEY
T}:T{
comma separated list of primery key columns\.
T}
T{
_PARENT
T}:T{
schema\-qualified parent table name\.
T}
T{
_DEST_TABLE
T}:T{
schema\-qualified partition table\.
T}
T{
_SCHEMA_TABLE
T}:T{
same as
\fIDEST_TABLE but dots replaced with "_\fR", to allow use as index names\.
T}
.TE
.sp
.RE
.SS "Example config file"
.sp
.RS 4
.nf
[cube_dispatcher]
job_name          = some_queue_to_cube
.fi
.RE
.sp
.RS 4
.nf
src_db            = dbname=sourcedb_test
dst_db            = dbname=dataminedb_test
.fi
.RE
.sp
.RS 4
.nf
pgq_queue_name    = udata\.some_queue
.fi
.RE
.sp
.RS 4
.nf
logfile           = ~/log/%(job_name)s\.log
pidfile           = ~/pid/%(job_name)s\.pid
.fi
.RE
.sp
.RS 4
.nf
# how many rows are kept: keep_latest, keep_all
mode = keep_latest
.fi
.RE
.sp
.RS 4
.nf
# to_char() fmt for table suffix
#dateformat = YYYY_MM_DD
# following disables table suffixes:
#dateformat =
.fi
.RE
.sp
.RS 4
.nf
part_template =
     create table _DEST_TABLE (like _PARENT);
     alter table only _DEST_TABLE add primary key (_PKEY);
.fi
.RE
.SH "LOGUTRIGA EVENT FORMAT"
PgQ trigger function pgq\.logutriga() sends table change event into queue in following format:
.PP
ev_type
.RS 4

(op || ":" || pkey_fields)\. Where op is either "I", "U" or "D", corresponging to insert, update or delete\. And
pkey_fields
is comma\-separated list of primary key fields for table\. Operation type is always present but pkey_fields list can be empty, if table has no primary keys\. Example:
I:col1,col2
.RE
.PP
ev_data
.RS 4
Urlencoded record of data\. It uses db\-specific urlecoding where existence of
\fI=\fR
is meaningful \- missing
\fI=\fR
means NULL, present
\fI=\fR
means literal value\. Example:
id=3&name=str&nullvalue&emptyvalue=
.RE
.PP
ev_extra1
.RS 4
Fully qualified table name\.
.RE
.SH "COMMAND LINE SWITCHES"
Following switches are common to all skytools\.DBScript\-based Python programs\.
.PP
\-h, \-\-help
.RS 4
show help message and exit
.RE
.PP
\-q, \-\-quiet
.RS 4
make program silent
.RE
.PP
\-v, \-\-verbose
.RS 4
make program more verbose
.RE
.PP
\-d, \-\-daemon
.RS 4
make program go background
.RE
.sp
Following switches are used to control already running process\. The pidfile is read from config then signal is sent to process id specified there\.
.PP
\-r, \-\-reload
.RS 4
reload config (send SIGHUP)
.RE
.PP
\-s, \-\-stop
.RS 4
stop program safely (send SIGINT)
.RE
.PP
\-k, \-\-kill
.RS 4
kill program immidiately (send SIGTERM)
.RE
