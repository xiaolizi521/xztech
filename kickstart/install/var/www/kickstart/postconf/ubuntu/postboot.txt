#!/usr/bin/perl -w

use strict;
use File::Copy;
use POSIX;
use LWP::UserAgent;

my ($ks, $mod_success, $post_msg, $contact);
my $sbpost = "/usr/local/sbpost";
system("export SBPOST=\"/usr/local/sbpost\"");

$contact = "PE (product-eng\@peer1.com), PA (pa-dev\@peer1.com)";

sub getpost {
	my $ret = {};
	return unless (-e "$sbpost/postconf.info");
	open IFH, "<$sbpost/postconf.info";
	while (<IFH>) {
		next if (/^\#/);
		chomp;
		my @line = split(/=/, $_);
		$ret->{$line[0]} = $line[1];
	}
	close IFH;
	return $ret;
}

sub lwpfetch {
	my $url = shift();
	my $file = shift();
	($url) && ($file) || return 1;
	postlog("FETCH: $url $file");
	my $ua = LWP::UserAgent->new();
	my $req = HTTP::Request->new('GET', $url);
	my $res = $ua->request($req, $file);
	if ($res->is_success()) { return 0; }
	else { return 1; }
}

sub lwp_post {
	my $url = shift();
	my $post = shift();
	($url) && ($post) || return { 'result' => 1 };
	my $file = shift();

	# Pull auth info out of URL if needed
	$url =~ s/http:\/\/(\w+:\w+)\@/http:\/\//;
	my $tmp = $1;

	# Make a string that we can post
	my @tmpary;
	foreach my $key (sort(keys %{$post})) {
		push @tmpary, "$key=$post->{$key}";
	}
	my $content = join("&", @tmpary);

	my $ua = LWP::UserAgent->new();
	my $req = HTTP::Request->new('POST' => $url);
	$req->authorization_basic(split(/:/, $tmp)) if ($tmp);
	$req->content_type('application/x-www-form-urlencoded');
	$req->content($content);
	my $res;
	if ($file) { $res = $ua->request($req, $file); }
	else { $res = $ua->request($req); }

	if ($res->is_success()) {
		return { 'result' => 0, 'content' => $res->content };
	}
	else {
		return { 'result' => 1, 'content' => $res->content };
	}
}

sub print_file {
	my ($file, $msg) = @_;
	if (open OFH, ">>$file") {
		print OFH "$msg\n";
		close OFH;
	} else {
		warn "Could not open $file for writing: $!";
	}
}

sub postlog {
	my $msg = shift();
	my $log = "/usr/local/sbpost/postconf.log";
	my $str = strftime("%Y/%m/%d-%T", gmtime());

	$msg = "$msg $str";
	&print_file($log, $msg);
	if ($msg =~ /FATAL/) { exit 1; }
}

sub do_modules {
	my $moddir = shift();

	opendir DH, $moddir;
	my @files = grep(!/^\./, sort readdir(DH));
	closedir DH;

	foreach my $file (@files) {
		my $realfile = "$moddir/$file";
		(-l $realfile) && ($realfile = readlink($realfile));
		if ($realfile =~ /\.sh$/) {
			postlog("INFO: Running /bin/bash $file");
			my $sysres = system("/bin/bash","$realfile");
			if ($sysres == 0) {
				postlog("INFO: $file done");
			}
			else {
				postlog("FATAL: $file failed");
			}
		}
		elsif ($realfile =~ /\.pl$/) {
			postlog("INFO: Running module $file");
			my $modres = scalar eval `cat $realfile`;
			if ($modres) {
				postlog("INFO: $file done");
			}
			else {
				postlog("FATAL: $file failed");
			}
		}
		unlink("$moddir/$file");
	}

	return 0;
}

sub do_reboot {
	unlink("/tmp/reboot_now");
	system("/sbin/shutdown -r now");
	exit 0;
}

# Since we proxied the install, apt attempts to send all requests through the proxy.  At this point
# the proxy is no longer accessible to this server and needs to be removed from apt.conf
unlink ("/etc/apt/apt.conf");

$ks = getpost();

postlog("INFO: Syncing hardware clock");
system("ntpdate -u -b time.nist.gov");
system("hwclock --directisa --systohc");

lwp_post("http://".$ks->{'ks_public_ipaddr'}."/cgi-bin/register.cgi",
	{ 'macaddr' => $ks->{macaddr},
	'ipaddr' => $ks->{IPADDR},
	'status' => 'postboot' } );

$mod_success = do_modules($ks->{'scriptd'});
if ($mod_success == 0) { $ks->{'status'} = "kickstarted" }
else { $ks->{'status'} = "ksfail" }

lwp_post("http://".$ks->{'ks_public_ipaddr'}."/cgi-bin/register.cgi",
	{ 'macaddr' => $ks->{macaddr},
	'ipaddr' => $ks->{IPADDR},
	'status' => $ks->{'status'} } );

unlink('/root/.bash_history');
unlink('/debroot.tar.gz','/debroot-kernel.tar.gz');
unlink('/download.log');

if ($ks->{'status'} eq "kickstarted") {
	my $online = time;
	$online = "ONLINE=$online";
	print_file("/boot/.serverbeach", $online);
	my @testing_customers=(4,7000307);
	if ($ks->{'customer_number'} ) {
		if (!grep(/$ks->{'customer_number'}/, @testing_customers)) {
			system("rm -rf $sbpost");
			unlink($0);
		} else {
			$post_msg =
				"This appears to be a TEST ($ks->{'customer_number'}) server. " .
				"Not deleting sbpost directory.";
			print STDERR $post_msg;
			postlog($post_msg);
		}
	} else {
		$post_msg = "\$customer_number not set.";
		print STDERR $post_msg;
		postlog($post_msg);
	}

	# @2010-06-16 hdawood Per bprewit and dmoore, to avoid FS corruption, we do
	# sync()'s to flush memory to disk before RR kicks in
	system("halt -fh");
} else {
	$post_msg =
		"Something went wrong when trying to run modules " .
		"under $ks->{'scriptd'}.\n Please check and report the contents " .
		"of $sbpost/failed and $sbpost/postboot.log to $contact...";
	print STDERR $post_msg;
}

exit 0;
