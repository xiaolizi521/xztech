#!/bin/bash
# =======================================================================
# Company:              ServerBeach
# Copyright(c):         ServerBeach, Ltd. 2006-2007
# Project:              Kickstart Sub-System
# Pri. Code Devloper:   SB Development Team
# Creation Date:        2006-09-14
#
# File Type:            Taskfile     
# File Name:            windows-copy.txt 
# Dependencies:         N/A    
#
# Discription:
# This file is used to copy all windows 2003 files onto a sever system.
# Specifcially this bash script is first loaded into the RAM SBRescue image and 
# uses the Post Configuraiton information provided by OCEAN to copy the 
# necessary windows install files on the hard disk.  Inclusive in these 
# files is are any addons that are part of the system; these add on include
# Databases and control panels.
# =======================================================================

# jb@2008-09-24 - Without this, doing control+c to stop during debugging 
# process was a bit troublesome. This should help.
# Exit if we control+c, mainly used for debugging purposes.
trap getout 2
getout() {
        echo 'Caught SIGINT, Exiting.'
        umount $target
        exit 1
}

# Source the following scripts.
. /etc/local.sh
. /usr/lib/sbks_lib.sh
export KSIPADDR MACADDR IPADDR REALIP

target="/mnt/sysimage/"
rsyncargs='-rlD -vv --exclude .svn --progress -T /var'

# jb@2008-09-24
# Check our exit codes as needed. Pass what you want it to say to the function.
# Used for rsync as the -s filelist check wasn't catching errors.
exitcheck() {
        if [ $? -ne 0 ]; then
                postlog "ERR" "$@ has failed!"
                exit 1
        else
                postlog "INFO" "$@ has completed successfully!"
        fi
}

# Make sure we have discs :)
havepata=0
havesata=0
postlog "INFO" "Checking for existence of drives"

# jb@2008-09-24
# Moved the stuff around below to make our sleep command a bit 
# more intelligent. Also made the fdisk check a function to make 
# it easier to call twice.
diskcheck() {
        fdisk -l /dev/hda | grep ^Disk >/dev/null && havepata=1
        fdisk -l /dev/sda | grep ^Disk >/dev/null && havesata=1
}

diskcheck

# jb@2008-09-24
# Set our drives if the above diskceck function finds stuff. We should probably change
# this over to the /proc/ checks we now do in sb_clearparts_win2k3.
if [ $havepata -eq 1 ] ; then
        disk='/dev/hda'
        hdparm -d1 $disk
elif [ $havesata -eq 1 ] ; then
        disk='/dev/sda'
else
        # jb@2008-09-24
        # Adding a nested statement to sleep and re-check if fails.
        # The introduction of udev appears to have caused the drives 
        # to not show up initially if PATA.
        echo -e "\nNo disks found. Sleeping 10 seconds to check for PATA drives."
        sleep 10

        diskcheck

        if [ $havepata -eq 1 ]; then
                echo 'Found disk /dev/hda'
                disk='/dev/hda'
                hdparm -d $disk
        
        elif [ $havesata -eq 1 ]; then
                echo 'Found disk /dev/sda'
                disk='/dev/sda'
        
        else

        postlog "ERR" "No PATA or SATA/SCSI drives found"
        
        fi
fi

# sb_clearparts_win2k3
# Script to clear ONLY the primary HDD for
# Windows 2003 kicks for RapidReload.
#
# v.51 - Fixed a bug checking against /dev/sda
#      - Fixed the multi-device output a bit.
# v.5  - Submitted to QA.
# v.4  - Fixed a few bugs
#	 Added postlog commands to errors.
#	 Implemented Carlos' PCI address fix.
# v.33 - Fixed /sys check some more.
#	 Fixed some grep issues with quotes around regex.
#	 Fixed diff arguments.
#	 Changed wc from -l to -w to be more safe.
# v.32 - Fixed /sys/ check against PCI add-ins.
#	 Fixed some typos.
# v.31 - Check block device PCI address globally.
# v.3 -  Lots of changes. Added /sys/ checks for VDs.
# v.24 - Added check for /proc/diskstats
# v.23 - Added check for RAID configurations per Nate.
# v.22 - Fixed another silly grep [a]. Oops!
# v.21 - Fixed 0 disk check, fixed grep [a]
# v.2 -  Changed some names, added some more checks.
# v.1 -  Initial Script
# Jim Bair 9/21/2008

# Make sure all of the apps we need are installed.
# BASH returns exit code of 127 for an app it cannot find.
apps="awk grep parted"
for test in $apps; do
	$test --help > /dev/null 2>&1
	if [ $? -eq 127 ]; then
		echo "$test application not found! $test is required by $(basename $0)." >&2
		echo 'Exiting.' >&2
		postlog "ERR" "$test is missing and required for partitioning."
		exit 1
	fi
done

# Function to clear our parts. Syntax stolen 
# from sb_clearparts.
clearparts() {
	parted -s /dev/${1} mklabel msdos > /dev/null 2>&1
        # jb@2008-09-24 - Added to nuke fat32 properly since the label here and the parted 
        # filesystem creation later doesn't actually wipe the filesystem. This is to keep 
        # from accidentally having file collisions.
        mke2fs /dev/${1}1 > /dev/null 2>&1
}

# Function to spit out our duplicate block device controllers.
# Trying to make the logic code a little less crazy. This serves 
# no purpose but to give our lspci result a better output. Also, 
# this may need set to cut -d: -f3- on Debian Etch.
controllerinfo() {
        echo -e "/dev/${1} => `cat /tmp/${1}.pci.txt`$(lspci | grep `cat /tmp/${1}.pci.txt` | cut -d: -f4-)"
}

# Check for the existance of /proc/diskstats, as 
# we use it a lot in this script.
if [ ! -e /proc/diskstats ]; then
	echo 'Our disk source, /proc/diskstats, is missing.' >&2
	echo 'Please contact PE to have this fixed.' >&2
	postlog "ERR" "/proc/diskstats is missing. Cannot proceed with partitioning."
	exit 1
fi

# Check the PCI device the disks are attached 
# to. If they are on the same device, the order is 
# correct and we can proceed on /dev/sda. If they are 
# different, we stop and DCO must disconnect the 
# secondary device. This is to avoid stomping over 
# one-off configurations that have disks outside of 
# the RAID array, which will cause random disk orders 
# and possibly nuke the wrong disk.

# Make sure /sys/block/* exists. If we have at least one block device,
# this should be here. This will fail if no disks are found on the system
# or if sbrescue somehow loses /sys/* from the initrd.
if [ ! -e /sys/block/sda/device ] && [ ! -e /sys/block/hda/device ]; then
	echo 'ERROR: /sys/block/ does not exist!' >&2
	echo 'We need this to verify our block device controllers.' >&2
	echo -e 'Either /sys/ has changed or no disks are configured on this machine!\n' >&2
	echo 'Please verify a disk is configured on this machine (fdisk -l). If it is and you are still getting this error, please contact Product Engineering.' >&2
	postlog "ERR" "Either the hard drive or the /sys/block/ entry is missing. Cannot proceed with partitioning."
	exit 1
fi

# Find our drives and see if we find more than one entry.
echo -n 'Discovering hard disk drives...'
disks=$(awk '{print $3}' /proc/diskstats | grep '[sh]d[a-z]' | grep -v '[sh]d[a-z][1-9]')
disknum=$(echo "$disks" | wc -w)
echo -e "Done.\n\n${disknum} disks found:\n${disks}\n"

# Check for more than one disk being present.
if [ $disknum -gt 1 ]; then
	
	# Find our PCI addresses for each block device.
	for i in $disks; do
		echo -n "Discovering PCI address for /dev/${i}..."
		ls -l /sys/block/${i}/device | sed 's/\//\n/g' | egrep '0{4}:\w\w:\w\w\.\w' | sed 's/0000://' | tail -1 > /tmp/${i}.pci.txt
		echo -e "Done.\n"

		# Make sure the PCI device exists. This is to catch if the output of /sys/block/* changes on us.
		pcicheck=$(lspci | grep "`cat /tmp/${i}.pci.txt`")
		if [ -z "$pcicheck" ]; then
                        echo -e "\nERROR: The PCI address detected by /sys/ is not present in lspci!" >&2
			echo "PCI address we found: `cat /tmp/${i}.pci.txt`" >&2
			echo 'Please contact Product Engineering.' >&2
                        postlog "ERR" "PCI address for block device /dev/${i} not found in lspci. Cannot proceed with partitioning."
			exit 1
		fi
	done
	
	# Find our primary disk ONLY. Used for finding our main PCI reference and for the disk checks below this stuff.
	echo -n 'Discovering primary disk...'
	primarydisk=$(awk '{print $3}' /proc/diskstats | grep '[sh]da' | grep -v '[sh]da[1-9]')
	echo -e "Done.\n"

	# See if all of our block devices are on the same controller
	echo 'Comparing block device PCI addresses.'
	compare=$(ls /tmp | grep '[sh]da.pci.txt')
	for i in $disks; do
		diff /tmp/${compare} /tmp/${i}.pci.txt > /dev/null 2>&1
		
		# An exit code of 0 means no differences, anything else means they don't match.
		if [ $? -eq 0 ]; then
			echo "/dev/${primarydisk} and /dev/${i} are using the same PCI device: `cat /tmp/${i}.pci.txt`"
		else
                        echo -e "\nERROR: More than one drive controller found! This is probably an onboard SATA/RAID configuration. There is no way to be sure which controller will be initialized first and assigned as /dev/${primarydisk}.\n" >&2
			echo 'Please leave only the primary drive/array connected and try again.' >&2
                        echo -e "Block device controller addresses found:\n" >&2
                        controllerinfo $primarydisk >&2
                        controllerinfo $i >&2
                        echo
			postlog "ERR" "Multiple block device controllers found. Only one may be present. Cannot proceed with partitioning."
			exit 1
		fi
	done
	
	# If we do have RAID and we don't get stopped by the above checks, it means we're only using
	# one controller for all /dev/sdX entries, so we're clear to nuke /dev/sda.
	echo -e "Multiple disks found, but disks are all on the same controller. Proceeding with regular drive checks.\n"
	rm -f /tmp/*.pci.txt
fi

# See if we have more than one block device. This 
# check is to watch for a return of both /dev/hda 
# and /dev/sda. This would be a misconfiguration 
# from DCO or a really funky kernel if it happens.
# Keeps from wiping more than one disk.
disknumber=$(echo "$primarydisk" | wc -w)

# If only one disk found, proceed with partition nuking.
if [ $disknumber -eq 1 ]; then
	echo "Primary drive /dev/${primarydisk} found. Clearing partitions..."
        clearparts $primarydisk
	partprobe
        # See if any partitions exist after clearparts is run
	partscheck=$(awk '{print $3}' /proc/diskstats | grep '[sh]da')
	if [ "$primarydisk" == "$partscheck" ]; then
	        echo "SUCCESS: Partitions cleared on /dev/${primarydisk}!"
	else
		echo 'ERROR: Partition removal failed!' >&2
		echo -e "The following partitions still exist: \n\n$partscheck \n" >&2
		echo 'Something has gone wrong. Please contact Product Engineering.' >&2
		postlog "ERR" "Attempted to remove partitions from /dev/${primarydisk} and failed."
		exit 1
	fi
# Checks if /dev/hda and /dev/sda are both found
# In theory, this should not happen (have both PATA/SATA present).
elif [ $disknumber -eq 2 ]; then
        echo 'ERROR: Both /dev/hda and /dev/sda are present!' >&2
        echo 'Either the kernel is doing something funny or both /dev/hda and /dev/sda are installed.' >&2
        echo 'Please keep only the primary connected and try again.' >&2
        echo 'If you believe this is an error, please contact Product Engineering.' >&2
	postlog "ERR" "Both /dev/hda and /dev/sda are present. Cannot proceed with partitioning."
        exit 1
fi

###################################
### End of sb_clearparts_win2k3 ###
###################################

# Partition
bootpart="${disk}1"

# jb@2008-09-24 - trying this instead due to the udev changes.
/etc/init.d/udev restart
echo "Restart of the udev service completed."

partprobe

# Check for drive after partitioning completes. This is for testing against udev errors.
if [ ! -e ${disk} ]; then
        echo "Our disk, ${disk} is missing. Figure out what's broken."
        exit 1
fi

postlog "INFO" "Getting drive geometry for $disk"
GEOM=$(parted -s ${disk} print | grep geometry | cut -d' ' -f5)
EOD=$(echo $GEOM | cut -d- -f2)

postlog "INFO" "Creating partitions on $disk"
parted -s ${disk} mklabel msdos mkpartfs primary fat32 0 8032.500

postlog "INFO" "Setting filesystem flags on $disk"
parted -s ${disk} set 1 boot on
parted -s ${disk} set 1 lba on
parted -s ${disk} print

# ndurr@2008-09-16: udev is not working correctly.  This is a fix but needs to be researched and documented.
/etc/init.d/udev restart
echo "Restart of the udev service completed."

# Copy down our initial setup files.
rsync $rsyncargs rsync://${KSIPADDR}/installs/windows/setup/setup.tgz /tmp/
exitcheck 'rsync of setup.tgz'

if [ -s "/tmp/setup.tgz" ] ; then
        tar -xvpzf /tmp/setup.tgz -C /tmp
else
        postlog "ERR" "rsync of setup.tgz failed" "win2k_copyfail"
fi

# Edited echo line to correct it for $bootpart. jb@9-15-2008
if [ -e ${bootpart} ] ; then 
        echo "${bootpart} exists"
else
        echo "${bootpart} is missing"
        exit 1
fi 

#ndurr@2008-09-18: the -d or --mbrdos writes a DOS/WinNT MBR to device
/tmp/ms-sys -d ${disk}
if [ $? -ne 0 ] ; then
        postlog "ERR" "failed running: ms-sys -d ${disk}" "win2k_copyfail"
        echo "failed running: ms-sys -d ${disk}"
fi

#ndurr@2008-09-18: the -3 or --fat32 writes a FAT32 partition DOS boot record to device
/tmp/ms-sys -3 $bootpart
if [ $? -ne 0 ] ; then
        postlog "ERR" "failed running: ms-sys -3 $bootpart" "win2k_copyfail"
        echo "failed running: ms-sys -3 $bootpart" 
fi

# Mount the target drive and check to make sure it gets mounted
mount -t vfat $bootpart $target 2>/dev/null
grep "$bootpart" /proc/mounts || postlog "ERR" "Mounting $bootpart failed" "win2k_copyfail"

for FILE in "/tmp/io.sys /tmp/msdos.sys /tmp/command.com /tmp/drvspace.bin" ; do
        cp $FILE $target
done

# Update the status of the provisioning process in the kickstart database
post "http://${KSIPADDR}/cgi-bin/register.cgi" "macaddr=${MACADDR}&ipaddr=${REALIP}&status=win2k_copy"

# Setup the skelton directory on new server
mkdir -p "${target}/skel"

# Retrieve the post configuration information for this server
# and writes it to the skel directory on the server
post "http://${KSIPADDR}/cgi-bin/postconf.cgi" "macaddr=${MACADDR}" "${target}/skel/postconf.txt"

# Retrieve the Windowws unattended installation file for this script
# and writes it to the skel directory on the server
post "http://${KSIPADDR}/cgi-bin/unattend.cgi" "macaddr=${MACADDR}" "${target}/skel/unattend.txt"

# Retrieve the licenses information for this script
# and writes it to the skel directory on the server
post "http://${KSIPADDR}/cgi-bin/licenses.cgi" "macaddr=${MACADDR}" "/tmp/licenses.tgz"

# Source the POST Configuration information that was just retrieved.
. ${target}/skel/postconf.txt

# These are the only variables that are going to differ in the taskfiles
echo ${osload} | egrep "^win2k$"
if [ $? -eq 0 ] ; then
        winver="2000"
        subver="server"
else
        winver="2003"
        for pattern in std web ent mssbp; do
             echo ${osload} | egrep ${pattern}
                if [ $? -eq 0 ] ; then
                        subver=${pattern}
                fi
        done
fi


# Check to see if the licences have been retrieved and if 
# unzip them the information.
havelicenses=0
if [ -s "/tmp/licenses.tgz" ] ; then
	havelicenses=1
	tar -C /tmp -zxf /tmp/licenses.tgz
	mkdir -p "${target}/skel/licenses"
fi

# Update the provisioning status to the kickstart database     
post "http://${KSIPADDR}/cgi-bin/register.cgi" "macaddr=${MACADDR}&ipaddr=${REALIP}&status=win2k_copy"

# Rsync the root files and skel tree
# Please note that --files-from: command allows for the list of
# files that need to be rsynce to be read from a file: i.e. filelist.root
rsync $rsyncargs --files-from=:/windows/${winver}/${subver}/filelist.root rsync://${KSIPADDR}/installs/windows/${winver}/${subver}/ $target
exitcheck 'rsync of root files'

# Rsync Web Matrix stuff if we need it
if [ ${ASPNET} -eq 1 ] ; then
    rsync $rsyncargs --files-from=:/windows/${winver}/${subver}/filelist.webmtrx rsync://${KSIPADDR}/installs/windows/${winver}/${subver}/ $target
fi

# Get MS SQL 2000 Workgroup if we need it
if [ x"${DATABASE}" == x"mssqlwg" ] ; then
    mkdir -p $target/skel/software/sql2kwg

    rsync $rsyncargs --files-from=:/windows/sql2kwg/filelist.sql2kwg rsync://${KSIPADDR}/installs/windows/sql2kwg/ $target/skel/software/sql2kwg/

    if [ -s $target/skel/software/sql2kwg/filelist.sql2kwg ] ; then
        postlog "INFO" "rsync of MS SQL Workgroup data complete"
    else
        postlog "ERR" "rsync of MS SQL Workgroup data incomplete"
    fi
fi

# Get MS SQL 2005 Express if we need it
if [ x"${DATABASE:0:8}" != x"mssql2k8" ] ; then
	mkdir -p $target/skel/software/sql2k5expr
	rsync $rsyncargs --files-from=:/windows/sql2k5/Expr/filelist.sql2k5epr rsync://${KSIPADDR}/installs/windows/sql2k5/Expr/ $target/skel/software/sql2k5expr/
	exitcheck 'rsync of MS SQL 2005 Express'

	if [ -s $target/skel/software/sql2k5expr/filelist.sql2k5epr ] ; then
		postlog "INFO" "rsync of MS SQL Server 2005 Express data complete"
	else
		postlog "ERR" "rsync of MS SQL Server 2005 Express data incomplete"
	fi
fi
	
# Get MS SQL 2005 Standard if we need it                
if [ x"${DATABASE}" == x"mssql2k5std" ] || [ x"${osload}" == x"win2k3mssbp" ]; then
	mkdir -p $target/skel/software/sql2k5std          
	rsync $rsyncargs --files-from=:/windows/sql2k5/Std/filelist.sql2k5std rsync://${KSIPADDR}/installs/windows/sql2k5/Std/ $target/skel/software/sql2k5std/
	
	if [ -s $target/skel/software/sql2k5std/filelist.sql2k5std ] ; then
		postlog "INFO" "rsync of MS SQL Server 2005 Standard data complete"
	else                                                
		postlog "ERR" "rsync of MS SQL Server 2005 Standard data incomplete"
	fi
fi

# Get MS SQL 2005 Workgroup Standard if we need it                
if [ x"${DATABASE}" == x"mssql2k5wg" ] ; then
	mkdir -p $target/skel/software/sql2k5wg           
	rsync $rsyncargs --files-from=:/windows/sql2k5/Wg/filelist.sql2k5wg rsync://${KSIPADDR}/installs/windows/sql2k5/Wg/ $target/skel/software/sql2k5wg/
	
	if [ -s $target/skel/software/sql2k5wg/filelist.sql2k5wg ] ; then
		postlog "INFO" "rsync of MS SQL Server 2005 Workgroup data complete"
	else                                                                                                                
		postlog "ERR" "rsync of MS SQL Server 2005 Workgroup data incomplete"
	fi
fi

# Get MS SQL 2008 Prerequisite Installer Files if we need it
if [ x"${DATABASE:0:8}" == x"mssql2k8" ] ; then
        mkdir -p $target/skel/software/sql2k8prereq
        rsync $rsyncargs --files-from=:/windows/sql2k8prereq/filelist.sql2k8prereq rsync://${KSIPADDR}/installs/windows/sql2k8prereq/ $target/skel/software/sql2k8prereq/               

        if [ -s $target/skel/software/sql2k8prereq/filelist.sql2k8prereq ] ; then
                postlog "INFO" "rsync of MS SQL Server 2008 Pre-req data complete"
        else
                postlog "ERR" "rsync of MS SQL Server 2008 Pre-req data incomplete"
        fi
fi

# Get MS SQL 2008 Express if we need it                
if [ x"${DATABASE}" == x"mssql2k8exp" ] ; then
	mkdir -p $target/skel/software/sql2k8exp           
	rsync $rsyncargs --files-from=:/windows/sql2k8exp/filelist.sql2k8exp rsync://${KSIPADDR}/installs/windows/sql2k8exp/ $target/skel/software/sql2k8exp/
	
	if [ -s $target/skel/software/sql2k8exp/filelist.sql2k8exp ] ; then
		postlog "INFO" "rsync of MS SQL Server 2008 Express data complete"
	else                                                                                                                
		postlog "ERR" "rsync of MS SQL Server 2008 Express data incomplete"
	fi
fi

# Get MS SQL 2008 Installer Files if we need it
if [ x"${DATABASE:0:8}" == x"mssql2k8" ] && [ x"${DATABASE}" != x"mssql2k8exp" ] ; then
        mkdir -p $target/skel/software/sql2k8
        rsync $rsyncargs --files-from=:/windows/sql2k8/filelist.sql2k8 rsync://${KSIPADDR}/installs/windows/sql2k8/ $target/skel/software/sql2k8/               

        if [ -s $target/skel/software/sql2k8/filelist.sql2k8 ] ; then
                postlog "INFO" "rsync of MS SQL Server 2008 data complete"
        else
                postlog "ERR" "rsync of MS SQL Server 2008 data incomplete"
        fi
fi

# Get Valued Added Monitoring (SysShep) source files if we need them
# Section added by oschroeder 11/12/08
# Section modified to rename VAM to SysShep
if [ x"${MONITORING}" == x"sshepherd" ] ; then
        mkdir -p $target/skel/software/sysshep
        rsync $rsyncargs --files-from=:/windows/2003/add-ons/sysshep/filelist.sysshep rsync://${KSIPADDR}/installs/windows/2003/add-ons/sysshep/ $target/skel/software/sysshep/

        if [ -s $target/skel/software/sysshep/filelist.sysshep ] ; then
                postlog "INFO" "rsync of SysShep data complete"
        else
                postlog "ERR" "rsync of SysShep data incomplete"
        fi
fi

# More verbose logging
if [ ! -z $PANEL ]; then
    postlog "INFO" "Copying files for ${PANEL}..."
else
    postlog "INFO" "No control panel found for this server"
fi

# Get ensim if we need it.
# Ensime 3.6
if [ x"${PANEL}" == x"ensim36" ] || [ x"${PANEL}" == x"ensim" ] ; then
	# Make sure we have licenses
    if [ $havelicenses -eq 1 ] ; then
	    esmlic=`find /tmp/licenses -name W\*.lic`
        if [ $esmlic ] && [ -s $esmlic ] ; then
            cp -f $esmlic $target/skel/licenses/ensimpro.lic
            if [ -s "$target/skel/licenses/ensimpro.lic" ] ; then
                postlog "INFO" "$esmlic copied to skel/licenses/ensimpro.lic"
            else 
                postlog "ERR" "$esmlic license copy failed" "win2k_copyfail"
            fi
        else
            postlog "ERR" "Ensim license not found" "win2k_copyfail"
        fi
    else
        postlog "ERR" "No licenses available" "win2k_copyfail"
    fi

    # Remove this after Steven fixes the 3.6 installer for Windows 2000
    if [ $winver -eq 2000 ] ; then esmver="3.2"
    else esmver="3.6" ; fi

    rsync $rsyncargs --files-from=:/panels/ensim/windows/pro/$esmver/windows${winver}/filelist.ensim rsync://${KSIPADDR}/installs/panels/ensim/windows/pro/$esmver/windows${winver}/ $target/skel/software/ensim/

    if [ -s $target/skel/software/ensim/filelist.ensim ] ; then
        postlog "INFO" "rsync of Ensim data complete"
    else
        postlog "ERR" "rsync of Ensim data incomplete"
    fi
#Ensim 4.0
elif [ x"${PANEL}" == x"ensim40win" ] ; then
	# Make sure we have licenses
    if [ $havelicenses -eq 1 ] ; then
	    esmlic=`find /tmp/licenses -name W\*.lic`
        if [ $esmlic ] && [ -s $esmlic ] ; then
            cp -f $esmlic $target/skel/licenses/ensimpro.lic
            if [ -s "$target/skel/licenses/ensimpro.lic" ] ; then
                postlog "INFO" "$esmlic copied to skel/licenses/ensimpro.lic"
            else 
                postlog "ERR" "$esmlic license copy failed" "win2k_copyfail"
            fi
        else
            postlog "ERR" "Ensim license not found" "win2k_copyfail"
        fi
    else
        postlog "ERR" "No licenses available" "win2k_copyfail"
    fi

    esmver="4.0"
    rsync $rsyncargs --files-from=:/windows/${winver}/${subver}/filelist.webmtrx rsync://${KSIPADDR}/installs/windows/${winver}/${subver}/ $target

    rsync $rsyncargs --files-from=:/panels/ensim/windows/pro/${esmver}/windows${winver}/filelist.ensim rsync://${KSIPADDR}/installs/panels/ensim/windows/pro/${esmver}/windows${winver}/ $target/skel/software/ensim/

    if [ -s $target/skel/software/ensim/filelist.ensim ] ; then
        postlog "INFO" "rsync of Ensim data complete"
    else
        postlog "ERR" "rsync of Ensim data incomplete"
    fi
# Ensim Pro X (100 User and Unlimitted License)
elif [ x"${PANEL}" == x"ensimProXwin100" ] || [ x"${PANEL}" == x"ensimProXwinUnl" ] ; then
	esmver="10.0"
	rsync $rsyncargs --files-from=:/windows/${winver}/${subver}/filelist.webmtrx rsync://${KSIPADDR}/installs/windows/${winver}/${subver}/ $target
	
	rsync $rsyncargs --files-from=:/panels/ensim/windows/pro/${esmver}/windows${winver}/filelist.ensim rsync://${KSIPADDR}/installs/panels/ensim/windows/pro/${esmver}/windows${winver}/ $target/skel/software/ensim/
	
	if [ -s $target/skel/software/ensim/filelist.ensim ] ; then
	        postlog "INFO" "rsync of Ensim data complete"
	else
	        postlog "ERR" "rsync of Ensim data incomplete"
	fi
# Helm 3.1 Control Panel
elif [ x"$PANEL" == x"helm31" ] ; then

    rsync $rsyncargs --files-from=:/panels/helm/filelist.helm31 rsync://${KSIPADDR}/installs/panels/helm/ $target/skel/software/helm/

    if [ -s $target/skel/software/helm/filelist.helm31 ] ; then
        postlog "INFO" "rsync of Helm data complete"
    else
        postlog "ERR" "rsync of Helm data incomplete"
    fi
# Helm 3.2 Control Panel
elif [ x"$PANEL" == x"helm32" ] ; then
        rsync $rsyncargs --files-from=:/panels/helm/32/filelist.helm32 rsync://${KSIPADDR}/installs/panels/helm/32/ $target/skel/software/helm/        
        if [ -s $target/skel/software/helm/filelist.helm32 ] ; then
                postlog "INFO" "rsync of Helm 3.2 data complete"
        else
                postlog "ERR" "rsync of Helm 3.2 data incomplete"
        fi
# Helm 4 Control Panel
elif [ x"$PANEL" == x"helm4" ] ; then
        rsync $rsyncargs --files-from=:/panels/helm/4/filelist.helm4 rsync://${KSIPADDR}/installs/panels/helm/4/ $target/skel/software/helm/        
        if [ -s $target/skel/software/helm/filelist.helm4 ] ; then
                postlog "INFO" "rsync of Helm 4 data complete"
        else
                postlog "ERR" "rsync of Helm 4 data incomplete"
        fi
# Plesk Control Panel 7.5
elif [ x"$PANEL" == x"plesk75" ] ; then
	# Make sure we have licenses
    if [ $havelicenses -eq 1 ] ;then
        psa_license=`find /tmp/licenses -name 'PLSK*.exe'`
        if [ $psa_license ] && [ -s $psa_license ] ; then
            cp -f $psa_license $target/skel/licenses/psa75lic.exe
            if [ -s $target/skel/licenses/psa75lic.exe ] ; then
                postlog "INFO" "Plesk license copied to skel/licenses/psa7lic.exe"
            else
                postlog "ERR" "Plesk license copy failed" "win2k_copyfail"
            fi
        else
            postlog "ERR" "Plesk license not found" "win2k_copyfail"
        fi
    else
        postlog "ERR" "No licenses available" "win2k_copyfail"
    fi

    rsync $rsyncargs --files-from=:/panels/plesk/windows/7.5.1/filelist.plesk rsync://${KSIPADDR}/installs/panels/plesk/windows/7.5.1/ $target/skel/software/plesk/

    if [ -s $target/skel/software/plesk/filelist.plesk ] ; then
        postlog "INFO" "rsync of Plesk data complete"
    else
        postlog "ERR" "rsync of Plesk data failed"
    fi
elif [ x"$PANEL" == x"plesk81" ] ; then
        # Make sure we have licenses
    if [ $havelicenses -eq 1 ] ;then
        psa_license=`find /tmp/licenses -name 'PLSK*.xml'`
        if [ $psa_license ] && [ -s $psa_license ] ; then
            cp -f $psa_license $target/skel/licenses/psa8lic.xml
            if [ -s $target/skel/licenses/psa8lic.xml ] ; then
                postlog "INFO" "Plesk license copied to skel/licenses/psa8lic.xml"
            else
                postlog "ERR" "Plesk license copy failed" "win2k_copyfail"
            fi
        else
            postlog "ERR" "Plesk license not found" "win2k_copyfail"
        fi
    else
        postlog "ERR" "No licenses available" "win2k_copyfail"
    fi

    rsync $rsyncargs --files-from=:/panels/plesk/windows/8.1.0/filelist.plesk rsync://${KSIPADDR}/installs/panels/plesk/windows/8.1.0/ $target/skel/software/plesk/

    if [ -s $target/skel/software/plesk/filelist.plesk ] ; then
        postlog "INFO" "rsync of Plesk data complete"
    else
        postlog "ERR" "rsync of Plesk data failed"
    fi
elif [ x"$PANEL" == x"plesk82" ] ; then
        # Make sure we have licenses
    if [ $havelicenses -eq 1 ] ;then
        psa_license=`find /tmp/licenses -name 'PLSK*.xml'`
        if [ $psa_license ] && [ -s $psa_license ] ; then
            cp -f $psa_license $target/skel/licenses/psa8lic.xml
            if [ -s $target/skel/licenses/psa8lic.xml ] ; then
                postlog "INFO" "Plesk license copied to skel/licenses/psa8lic.xml"
            else
                postlog "ERR" "Plesk license copy failed" "win2k_copyfail"
            fi
        else
            postlog "ERR" "Plesk license not found" "win2k_copyfail"
        fi
    else
        postlog "ERR" "No licenses available" "win2k_copyfail"
    fi

    rsync $rsyncargs --files-from=:/panels/plesk/windows/8.2.0/filelist.plesk rsync://${KSIPADDR}/installs/panels/plesk/windows/8.2.0/ $target/skel/software/plesk/

    if [ -s $target/skel/software/plesk/filelist.plesk ] ; then
        postlog "INFO" "rsync of Plesk data complete"
    else
        postlog "ERR" "rsync of Plesk data failed"
    fi
# Plesk Control Panel 8.3
elif [ x"$PANEL" == x"plesk83" ] ; then
        # Make sure we have licenses
        if [ $havelicenses -eq 1 ] ;then
            psa_license=`find /tmp/licenses -name 'PLSK*.xml'`
            if [ $psa_license ] && [ -s $psa_license ] ; then
                cp -f $psa_license $target/skel/licenses/psa8lic.xml
                if [ -s $target/skel/licenses/psa8lic.xml ] ; then
                    postlog "INFO" "Plesk license copied to skel/licenses/psa8lic.xml"
                else
                    postlog "ERR" "Plesk license copy failed for ${PANEL}" "win2k_copyfail"
                fi
            else
                postlog "ERR" "Plesk license not found for ${PANEL}" "win2k_copyfail"
            fi
        else
            postlog "ERR" "No licenses available for ${PANEL}" "win2k_copyfail"
        fi

        rsync $rsyncargs --files-from=:/panels/plesk/windows/8.3.0/filelist.plesk rsync://${KSIPADDR}/installs/panels/plesk/windows/8.3.0/ $target/skel/software/plesk/

        if [ -s $target/skel/software/plesk/filelist.plesk ] ; then
            postlog "INFO" "rsync of Plesk data complete"
        else
            postlog "ERR" "rsync of Plesk data failed"
        fi
fi


# Rsync the i386 source tree
rsync $rsyncargs --files-from=:/windows/${winver}/${subver}/filelist.i386 rsync://${KSIPADDR}/installs/windows/${winver}/${subver}/ $target
exitcheck 'rsync of i386 source tree'

if [ -s $target/filelist.i386 ] ; then
        postlog "INFO" "rsync of $winver/$subver/i386 complete"
    else
        postlog "ERR" "rsync of $winver/$subver/i386 failed"
fi

# Cleanup: Remove all temporary files.
rm -f $target/filelist.*
cd /mnt
sync
umount ${target}

# Update the provisioning status on the kickstart database server.
 post "http://${KSIPADDR}/cgi-bin/register.cgi" "macaddr=${MACADDR}&ipaddr=${REALIP}&status=win2k_copydone"

# Attempt to circumvent hanging shutdown on SuperMicro servers
if [ `echo ${MACADDR} | cut -b 1-8` == "00:30:48" ] ; then
        #/sbin/shutdown -rn now
        reboot
else
        # Reboot the system and begin the windows setup process.
        /sbin/shutdown -rn now
fi 
