#!/bin/bash
# audit.txt
# This is a temporary solution to posting our XML back to the DCC.
# Ideally, this should be merged back into Python natively and 
# be inside of what's currently audit.py, and moving that back as 
# audit.txt.
#
# This is being used due to time constraints.
# jbair@2009-12-10

# Source the following files
. /etc/local.sh
. /usr/lib/sbks_lib.sh

auditOutput='output.xml'
auth='amagnus:PRUchec2'
headers='"content-type: text/xml"'
logFile='/tmp/audit.log'
options="-X POST -i -k -d@${auditOutput} -u${auth} -H${headers}"
script='audit.py'

# This function checks for a "reboot" status every 30 seconds. It may
# be disowned by the script to run in the background.
checkForStatus() {
    sleep=30
    while [ 1 ]; do
        server_status=$(post "http://${KSIPADDR}/cgi-bin/server_status.cgi" "macaddr=$MACADDR")
        if [[ $server_status == "reboot" ]] ; then
            echo "Rebooting the system"
            /sbin/reboot
	    break
        else
            echo "Status is $server_status. Sleeping for $sleep seconds"
	    sleep $sleep
        fi
    done
}

auditFail() {
	# Used for ANY failures during the audit process
	echo -en "\nSending 'audit_fail' status to Kickstart..."
	out="$(post "http://kickstart.${DC}/cgi-bin/register.cgi" "macaddr=${MACADDR}&ipaddr=${IPADDR}&status=audit_fail")"
	if [ "$out" != "status=success" ]; then
		echo "failed. Status given: $out" >&2
	else
		echo "done."
	fi
	echo -e "\nCheck $logFile for more detailed info if needed."
}

auditDone() {
	# Used for successful audit status
	echo -en "\nSending 'audit_done' status to Kickstart..."
	out="$(post "http://kickstart.${DC}/cgi-bin/register.cgi" "macaddr=${MACADDR}&ipaddr=${IPADDR}&status=audit_done")"
	if [ "$out" != "status=success" ]; then
		echo "failed. Status given: $out" >&2
	else
		echo "done."
	fi
}

# Before anything else, make sure we have a network connection.
echo -n "Testing our network..."
echo "Begin network test:" >> $logFile
ping -c 2 -w 2 www.google.com >> $logFile 2>&1
# If this fails, try a static IP from Google's NS
if [ $? -ne 0 ]; then
	ping -c 2 -w 2 8.8.8.8 >> $logFile 2>&1
	if [ $? -ne 0 ]; then
		echo -e "failed.\n\nIf this system is not on VLAN 405, please place it on VLAN 405." >&2
		exit 1
	else
		echo -e "failed.\n\nWe can ping an IP, but not resolve hostnames. Something is wrong." >&2
	fi
else
	echo -e "done\n"
fi

# Export the following variable information
export MACADDR IPADDR REALIP

# Work in /tmp/
cd /tmp/

# Find our DC Name and export it for getRaidCli()
DC="$(grep 'kslan.' /etc/resolv.conf | cut -d . -f 2-)"
export DC
dcNum="$(grep 'kslan.' /etc/resolv.conf | cut -d . -f 2- | wc -l)"
if [ "$dcNum" -ne 1 ]; then
	echo "Unable to find our datacenter." >&2
	echo "Output of DC:" >&2
	echo $DC >&2
	auditFail
	exit 1
fi

# Get our audit.py file
touch $logFile
echo -n "Fetching $script from Kickstart..."
echo "Begin wget of $script from Kickstart" >> $logFile
wget http://kickstart.${DC}/kickstart/taskfiles.new/${script} -O ${script} >> $logFile 2>&1
if [ $? -ne 0 ]; then
	echo -e "failed.\nUnable to download $script from kickstart.$DC" >&2
	auditFail
	exit 1
elif [ ! -s $script ]; then
	echo -e "failed.\nDownloaded script but has no file size." >&2
	auditFail
	exit 2
else
	echo -e "done.\n"
fi

# Run our audit.py file
echo -e "Running ${script}\n"
chmod +x ${script}
./${script} > $auditOutput
if [ $? -ne 0 ]; then
	echo "$script failed to run successfully." >&2
	auditFail
	exit 3
else
	echo -e "$script has finished.\n"
fi

# For WinStart compatibility, let Kickstart know the audit has
# been completed before attempting to post to the DCC.
auditDone

# Build our cURL command.
curlCommand="curl ${options} https://dcc.${DC}/datacenter/devices/audit"

# We run the post to the DCC in this loop. Essentially, when 
# trying to audit a system where it cannot find the MAC on the 
# network/NetAdmin, the DCC will fail to post. To save DCO some 
# trouble, we loop and try again a few times.
loop=0
while [ $loop -lt 16 ]; do
	# Increment our loop
	loop=$((loop+1))

	# Run our cURL command and append it to logs.
	# This REQUIRES the eval within commmandOut. Not entirely sure
	# why, but it will throw an error about "Couldn't resolve host 'text'"
	echo -e "Running the following command:\n${curlCcommand}" >> $logFile
	echo -n "Posting our audit back to the DCC..."
	curlCommandOut="$(eval $curlCommand 2>&1)"
	echo "$curlCommandOut" >> $logFile
	echo -e "done.\n"

	# If we don't have this error, exit out of loop.
	locationError="$(echo $curlCommandOut | grep -i 'Could not find a location')"
	if [ -z "$locationError" ]; then
		break
	else
		# Just change minute as needed as well as loop above. Was waiting while testing so
		# made it dynamic while we decided on what value to use. =)
		minutes=1
		sleepTime=$((minutes*60))
		if [ $minutes -eq 1 ]; then
			echo "The DCC doesn't know our current location. Sleeping for $minutes minute."
		else
			echo "The DCC doesn't know our current location. Sleeping for $minutes minutes."
		fi

		echo "This was attempt #${loop}"
		sleep $sleepTime
	fi
done

# Make sure no errors are returned from the DCC
errorCheck="$(echo $curlCommandOut | grep -i 'error')"
if [ -n "$errorCheck" ]; then
	echo "An error was returned from the DCC." >&2
	echo "Here is our response from the DCC:" >&2
	echo "$curlCommandOut" >&2
	auditFail
	exit 4
fi

# Find our HTTP Status Line(s) and ensure we only have one.
ourLine="$(echo "$curlCommandOut" | egrep '^HTTP/1.[0-9]' | grep -v '100 Continue')"
ourLineCount="$(echo "$ourLine" | wc -l)"
if [ -z "$ourLine" ]; then
	echo "Something happened and we cannot find our response line." >&2
	exit 5
elif [ "$ourLineCount" -ne 1 ]; then
	echo "ourLine: $ourLine" >> $logFile
	echo "ourLineCount: $ourLineCount" >> $logfile
	echo "Something happened and we cannot tell if our audit posted." >&2
	echo "We found $ourLineCount line(s) instead of 1." >&2
	auditFail
	exit 6
fi

# Find our status code and ensure it's only numbers
ourStatus="$(echo "$ourLine" | awk '{print $2}' | grep '[0-9][0-9][0-9]')"
if [ -z "$ourStatus" ]; then
	echo "ourLine: $ourLine" >> $logFile
	echo "Something happened and we cannot tell if our audit posted." >&2
	echo "ourStatus code is failing regular expression." >&2
	auditFail
	exit 7
fi

# Ensure we get an exit status in the 2xx range
if [ "$ourStatus" -ge 300 -o "$ourStatus" -lt 200 ]; then
	echo "Sending our data to the DCC has failed." >&2
	echo "Here is our response from the DCC:" >&2
	echo "$curlCommandOut" >&2
	auditFail
	exit 8
fi

# Find our device ID
# Debug info is already in logFile
device="$(echo "$curlCommandOut" | awk '($1 ~ /Location:/) {print $NF}')"
if [ -z "$device" ]; then
	echo "Something happened and we cannot find our device ID."
	auditFail
	exit 9
fi

# All done.
echo "Audit has been successfully posted to the DCC!"
echo "Status : $ourLine"
echo "Device : $device"
echo "MAC    : ${MACADDR}"
echo "URL    : https://dcc.${DC}/datacenter/devices/audit"
echo -e "\nCheck $logFile for more detailed info if needed."

# Screen prevents bash job control from working properly so instead of
# backgrounding checkForStatus and using "disown", we will detach the
# screen and run the check in the foreground.
screen -d

# Check for a "reboot" status after script termination.
checkForStatus

exit 0
