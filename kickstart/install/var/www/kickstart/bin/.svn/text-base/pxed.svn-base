#!/usr/bin/perl -w

BEGIN {
	use lib qw(/exports/kickstart/lib);
	require 'sbks.pm';
}

use strict;
use IO::Socket::INET;

sub parse {
	my $input  = shift();
	my $return = 1;
	return $return unless ( $input =~ /^wikiwiki\s+/ );

	my ( undef, $macaddr, $target ) = split( /\s+/, $input );
	$macaddr = untaint( 'macaddr', $macaddr );
        print "\tI received macaddr='$macaddr' & target='$target'\n";

	chdir( $Config->{'ks_pxeconf'} );

	if ( !defined($macaddr) ) {
		kslog( 'info', "Invalid or null MAC address" );
	}
	elsif ( !defined($target) ) {
		kslog( 'info', "Invalid or null PXE target" );
	}
	elsif ( $target eq 'none' ) {
		( my $pxemac = $macaddr ) =~ s/:/-/g;
		$pxemac = "01-" . $pxemac;
		if ( -l $pxemac ) {
			unlink($pxemac);
			dhcp_refresh();
			$return = 0;
		}
		else {
			kslog( 'info', "Unable to unlink $pxemac. Symlink not found" );
		}
	}
	elsif ( !-f $target ) {
		kslog( 'info', "Missing PXE target file" );
	}
	else {

		# Make sure dhcpd.conf is updated.
		dhcp_refresh();

		#my $pxemac = "1:".clean_mac($macaddr);
		( my $pxemac = $macaddr ) =~ s/:/-/g;
		$pxemac = "01-" . $pxemac;

		# If the link exists, the MAC is already in the dhcpd.conf
		# Remove the link so a new symlink can be created
		if ( -l $pxemac ) {
      # hdawood@2009-01-30: adding log message for current pxe target
      my $oldtarget = readlink( $pxemac );		
      if ( $oldtarget ) {
        kslog( 'info', "$macaddr LINK $oldtarget -> $pxemac REMOVING" );
      } else {
        kslog( 'info', "$macaddr LINK $oldtarget -> $!" );
      }

      unlink($pxemac);
    }

		# ndurr@2009-01-30: symlink returns 1 on success
		my $sres = symlink( $target, $pxemac );

		if ( $sres == 1 ) {
			kslog( 'info', "$macaddr LINK $target -> $pxemac DONE" );
			$return = 0;
		}
		else {
			kslog( 'info', "$macaddr LINK $target -> $pxemac FAIL" );
		}
	}

	chdir('/');
	return $return;
}

# MAIN

if ( is_running() ) { exit 0; }

print "Starting pxed...\n";
kslog( "info", "Starting" );

chdir("/");

my $sock = IO::Socket::INET->new(
	'LocalAddr' => '127.0.0.1',
	'LocalPort' => 6969,
	'Proto'     => 'tcp',
	'Listen'    => 10
  )
  or die "$!";

while ( my $client = $sock->accept() ) {
	print "Data coming in...\n";
	my $data = <$client>;
	chomp $data;
	close($client);
	parse($data);
	chdir('/');
	print "Data processed\n";
}

close($sock);

1;


