#!/bin/bash

# File: p1post
# Package: p1post
# Install Location: /usr/local/p1post/
# Name: Peer1 Automated Post Installation Package
#
# Supported Platforms: 
# Redhat Enterprise Linux Based Distributions (Fedora, CentOS, RHEL)
# Debian (all)
# Ubuntu (all)
#
# Description:
# P1Post is the final step in the OS provisioning process, and is a critical
# step in completing a server for our customers. By facilitating the
# configuration of the server, installation of any additional addons,
# and finally securing the server, the p1post package ensures that
# each install is full featured and ready to go for our customers
# immediately.
#
# Usage:
# p1post is a modular system that functions similarly to the init system found
# on most linux systems today. Under the directory '/usr/local/p1post/script.d'
# you will find various numbered scripts. This directory is iterated through
# by the p1post package. By adding a script to this folder with a number, you
# will have it automatically run during the post install process. The number
# functions as a priority, the lower the number, the earlier in the process the
# script runs. Modules are automatically added via the postconf script, which is
# the step prior to the p1post process.
#
# Author: Adam Hubscher <ahubscher AT peer1 DOT com>
# Version: 1.0
# Last Updated: N/A
# Revision: 1

## Variables ##

# Set Path Variable
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

# Postconf contains customer information and any selected addons
. /usr/local/p1post/postconf.info

# KS Library contains functions and required variables
. /usr/local/p1post/lib/p1ks_lib.sh

# Source any files under 'lib'
for lib in `find ${PWD} | grep lib`; do
    [ -f ${lib} ] && . "$lib"
done

# Export any critical varaibles.
export PATH SCRIPT_D p1post

set +e

# Set contact information for any emails sent by script
CONTACT="PE (pesupport@peer1.com), PA (pa-dev@peer1.com)"

# This array contains customers flagged as "dev" customers.
# When a machine is provisioned using this customer number
# the p1post package will not be removed, leaving behind
# potentially valuable debug and log data.
CUSTOMERS=(4 7000307)

# Current working directory
PWD=$(/usr/bin/dirname $0)

# Assume this is a customer server until told otherwise
is_customer_server=1

# These variables are used later during network tests
retries=0
res=0

# Function that runs all of our post-install scripts.
# Iterates through the script.d directory executing in numerical order.
run_scripts() {
    dir=$1
    cd $dir

    # Start executing scripts under our scripts directory
    for script in `ls -1 | sort` ; do
        
        # Set our script to executable and run it.
        chmod +x $script
        echo "Running ${script}"
        postlog "INFO" "Running ${script}"
        ./$script
        
        # Note our exit code from the script that was run.
        res=$?
    
        # Delete successful script if a customer server.
        if [ $res -eq 0 ] ; then
            # Only delete if a customer server
            if [ $is_customer_server -eq 1 ]; then
                rm -f ${script}
            fi
        # Catch any script failures.
        else
            echo "$script failed with status $res"
            postlog "FATAL" "$script failed with status $res"
            echo "$script $res" >> "${p1post}/failed"
        fi
    done
}

# the two functions export MACADDR and IPADDR
getMAC
getIP

# Determine if we are running on a customer server or known test server
if [ -z "$customer_numbger" ]; then
    for customer in ${CUSTOMERS[@]}; do
        if [ $customer_number -ne $customer ]; then
            continue
        else
            postMsg="This appears to be a TEST (${customer}) server."
            postMsg="${postMsg} Not deleting p1post package."
            echo ${postMsg}
            postlog "INFO" "${postMsg}"
            is_customer_server=0
            break
        fi
    done
else
    postMsg="\$customer_number not set. We will remove the p1post directory"
    echo ${postMsg}
    postlog "INFO" "${postMsg}"
fi

# Create file to write failures from above function
# Also creates a running file, but we do not log to it. 
echo -n > "${p1post}/failed"
echo -n > "${p1post}/running"

# Make sure we have network connectivity.
while [ $retries -lt 5 ] && [ $res -ne 0 ]; do
    ping -c1 -i5 ${ks_public_ipaddr}
    res=$?
    retries=$(($retries + 1))
    echo "Tried to reach kickstart $retries time(s)"
    postlog "INFO" "Tried to reach kickstart $retries time(s)"

    echo "Server IP is $IPADDR"
    postlog "INFO" "Server IP is $IPADDR"

    echo "Sleeping for a bit..."
    postlog "INFO" "Sleeping for a bit..."
    sleep 2
done

# Output to screen if we cannot connect to the kickstart server.
if [ $res -ne 0 ] ; then
    echo "Cannot contact kickstart server, possible network problem."
    echo "Check that the server has not been moved to the wrong VLAN."
    echo "If the server appears to be on the proper VLAN, this is"
    echo "probably a network problem."
    echo
    echo -n "Press any key to continue .. "
    read FOO
fi

# Send [postboot] status to kickstart
fetch "http://${ks_public_ipaddr}/cgi-bin/register.cgi" \
    "macaddr=${MACADDR}&ipaddr=${IPADDR}&status=postboot"

## Begin Time Setup ##

postMsg="Syncing hardware clock to time.nist.gov"
echo ${postMsg}
postlog "INFO" "${postMsg}"

# Syncing time to primary time cluster
ntpdate -u -b time.nist.gov
hwclock --systohc

postMsg="Restarting time-dependent services"
echo ${postMsg}
postlog "INFO" "${postMsg}"

# Restart services reliant upon time
service crond restart
service syslog restart

# Certain addons have a bad habit of messing up the resolv.conf.
# Create a backup, just in case.
cp -f /etc/resolv.conf /etc/resolv.conf.backup

## P1POST Modules Section ##
# This is where the modules, found in script.d, are run.

# If modules, run in numerical order using run_scripts function.
if [ -d "${p1post}/script.d" ] ; then
    postMsg="Running postboot scripts in ${p1post}/script.d"
    echo ${postMsg}
    postlog "INFO" "${postMsg}"
    run_scripts "${p1post}/script.d"
else
    postMsg="No postboot scripts present. Skipping."
    echo ${postMsg}
    postlog "INFO" "No postboot scripts present. Skipping."
fi

# If ${p1post}/failed has anything in it, set status to failed.
if [ -s "${p1post}/failed" ] ; then
    STATUS="ksfail"
else
    STATUS="kickstarted"
fi

# Restore the resolv.conf to prior working state.
cp -f /etc/resolv.conf.backup /etc/resolv.conf

# Report current status back to kickstart server.
fetch "http://${ks_public_ipaddr}/cgi-bin/register.cgi" \
    "macaddr=${MACADDR}&ipaddr=${IPADDR}&status=${STATUS}"

## Cleanup Section ##

# We do not want any trace of p1post left for customers.
echo -n > /var/log/wtmp

# Remove any command history
rm -f /root/.bash_history
rm -f /home/beach/.bash_history

# Status "kickstarted" means no issues were encountered during post install.
# If this is the case, begin final cleanup stage.
if [ "${STATUS}" == "kickstarted" ] ; then
    # Add ONLINE=*unix time* to /boot/.serverbeach so we know when it finished
    online=`date "+%s"`
    echo "ONLINE=$online" >> /boot/.serverbeach

    # Keep the following around if this is a dev server.
    if [ $is_customer_server -eq 1 ] ; then

        # Remove p1post from startup
        chkconfig --del p1post

        # Remove the p1post RPM package
        rpm -e p1post

        # Remvoe any potentially left over files
        rm -f /etc/resolv.conf.new
        rm -rf ${p1post}
        rm -f /tmp/postconf.txt
        rm -f $0
        rm -f /etc/init.d/p1post
        rm -f /etc/yum.repos.d/kickstart.repo

        # Remove anaconda kickstart config
        rm -f /root/anaconda-ks.cfg

        # Remove any left over logs
        rm -f /root/install.log
        rm -f /root/install.log.syslog
        rm -f /var/log/lasterror
    fi

    # Current workflows require the finished system to be in an off or halted state.
    # Automation handles the final restart/power on, and will send the welcome letter.
    # In order to protect disks and data, we perform a clean halt that shuts down
    # all hardware and stops any hard drives. The machine is left in a powered on stat.
    halt -fh

else

    # If the status is not "kickstarted" chances are something failed or went wrong.
    # Leave all logs and components in place, and notify any technicians to contact PE.
    echo "It appears that something failed while performing the post installation tasks."
    echo "Please examine the postboot.log and postconf.log found under /usr/local/p1post/logs"
    echo "Also, examine the contents of /usr/local/p1post/failed"
    echo "If you are unable to complete the install on your own, please contact Product Engineering"
    echo "Please send an email to pesupport@peer1.com and we will be happy to assist you as soon as possible."
    echo "Please include as many details as possible, as well as KVM or SSH access to this server."
    read FOO
    exit 1

fi

exit 0